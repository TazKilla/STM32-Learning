
005led_toggle.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000174  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013f4  08000180  08000180  00010180  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001574  08001574  00011574  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015e4  080015e4  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  080015e4  080015e4  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080015e4  080015e4  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015e4  080015e4  000115e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080015e8  080015e8  000115e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  080015ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  20000080  0800166c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ec  0800166c  000201ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000f68  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000054f  00000000  00000000  0002105b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  000215b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000000fd  00000000  00000000  00021728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002de6  00000000  00000000  00021825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001f53  00000000  00000000  0002460b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0000995d  00000000  00000000  0002655e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000c24  00000000  00000000  0002febc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  00030ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000180 <__do_global_dtors_aux>:
 8000180:	b510      	push	{r4, lr}
 8000182:	4c05      	ldr	r4, [pc, #20]	; (8000198 <__do_global_dtors_aux+0x18>)
 8000184:	7823      	ldrb	r3, [r4, #0]
 8000186:	b933      	cbnz	r3, 8000196 <__do_global_dtors_aux+0x16>
 8000188:	4b04      	ldr	r3, [pc, #16]	; (800019c <__do_global_dtors_aux+0x1c>)
 800018a:	b113      	cbz	r3, 8000192 <__do_global_dtors_aux+0x12>
 800018c:	4804      	ldr	r0, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x20>)
 800018e:	f3af 8000 	nop.w
 8000192:	2301      	movs	r3, #1
 8000194:	7023      	strb	r3, [r4, #0]
 8000196:	bd10      	pop	{r4, pc}
 8000198:	20000080 	.word	0x20000080
 800019c:	00000000 	.word	0x00000000
 80001a0:	0800155c 	.word	0x0800155c

080001a4 <frame_dummy>:
 80001a4:	b508      	push	{r3, lr}
 80001a6:	4b03      	ldr	r3, [pc, #12]	; (80001b4 <frame_dummy+0x10>)
 80001a8:	b11b      	cbz	r3, 80001b2 <frame_dummy+0xe>
 80001aa:	4903      	ldr	r1, [pc, #12]	; (80001b8 <frame_dummy+0x14>)
 80001ac:	4803      	ldr	r0, [pc, #12]	; (80001bc <frame_dummy+0x18>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	00000000 	.word	0x00000000
 80001b8:	20000084 	.word	0x20000084
 80001bc:	0800155c 	.word	0x0800155c

080001c0 <memchr>:
 80001c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001c4:	2a10      	cmp	r2, #16
 80001c6:	db2b      	blt.n	8000220 <memchr+0x60>
 80001c8:	f010 0f07 	tst.w	r0, #7
 80001cc:	d008      	beq.n	80001e0 <memchr+0x20>
 80001ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001d2:	3a01      	subs	r2, #1
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d02d      	beq.n	8000234 <memchr+0x74>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	b342      	cbz	r2, 8000230 <memchr+0x70>
 80001de:	d1f6      	bne.n	80001ce <memchr+0xe>
 80001e0:	b4f0      	push	{r4, r5, r6, r7}
 80001e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001ea:	f022 0407 	bic.w	r4, r2, #7
 80001ee:	f07f 0700 	mvns.w	r7, #0
 80001f2:	2300      	movs	r3, #0
 80001f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80001f8:	3c08      	subs	r4, #8
 80001fa:	ea85 0501 	eor.w	r5, r5, r1
 80001fe:	ea86 0601 	eor.w	r6, r6, r1
 8000202:	fa85 f547 	uadd8	r5, r5, r7
 8000206:	faa3 f587 	sel	r5, r3, r7
 800020a:	fa86 f647 	uadd8	r6, r6, r7
 800020e:	faa5 f687 	sel	r6, r5, r7
 8000212:	b98e      	cbnz	r6, 8000238 <memchr+0x78>
 8000214:	d1ee      	bne.n	80001f4 <memchr+0x34>
 8000216:	bcf0      	pop	{r4, r5, r6, r7}
 8000218:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800021c:	f002 0207 	and.w	r2, r2, #7
 8000220:	b132      	cbz	r2, 8000230 <memchr+0x70>
 8000222:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000226:	3a01      	subs	r2, #1
 8000228:	ea83 0301 	eor.w	r3, r3, r1
 800022c:	b113      	cbz	r3, 8000234 <memchr+0x74>
 800022e:	d1f8      	bne.n	8000222 <memchr+0x62>
 8000230:	2000      	movs	r0, #0
 8000232:	4770      	bx	lr
 8000234:	3801      	subs	r0, #1
 8000236:	4770      	bx	lr
 8000238:	2d00      	cmp	r5, #0
 800023a:	bf06      	itte	eq
 800023c:	4635      	moveq	r5, r6
 800023e:	3803      	subeq	r0, #3
 8000240:	3807      	subne	r0, #7
 8000242:	f015 0f01 	tst.w	r5, #1
 8000246:	d107      	bne.n	8000258 <memchr+0x98>
 8000248:	3001      	adds	r0, #1
 800024a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800024e:	bf02      	ittt	eq
 8000250:	3001      	addeq	r0, #1
 8000252:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000256:	3001      	addeq	r0, #1
 8000258:	bcf0      	pop	{r4, r5, r6, r7}
 800025a:	3801      	subs	r0, #1
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop

08000260 <activatePort>:
		.portIndex = 'D',
		.portIONbr = 16
};

int activatePort(GPIOPort * port)
{
 8000260:	b480      	push	{r7}
 8000262:	b083      	sub	sp, #12
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	if(port == NULL)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	2b00      	cmp	r3, #0
 800026c:	d101      	bne.n	8000272 <activatePort+0x12>
		return 1;
 800026e:	2301      	movs	r3, #1
 8000270:	e008      	b.n	8000284 <activatePort+0x24>

	*port->pRCCReg |= 1 << 18;
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	685b      	ldr	r3, [r3, #4]
 8000276:	681a      	ldr	r2, [r3, #0]
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000280:	601a      	str	r2, [r3, #0]
	return 0;
 8000282:	2300      	movs	r3, #0
}
 8000284:	4618      	mov	r0, r3
 8000286:	370c      	adds	r7, #12
 8000288:	46bd      	mov	sp, r7
 800028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028e:	4770      	bx	lr

08000290 <selectPinFunction>:

int selectPinFunction(GPIOPort * port, int pin, int function)
{
 8000290:	b480      	push	{r7}
 8000292:	b085      	sub	sp, #20
 8000294:	af00      	add	r7, sp, #0
 8000296:	60f8      	str	r0, [r7, #12]
 8000298:	60b9      	str	r1, [r7, #8]
 800029a:	607a      	str	r2, [r7, #4]
	if(port == NULL)
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d101      	bne.n	80002a6 <selectPinFunction+0x16>
		return 1;
 80002a2:	2301      	movs	r3, #1
 80002a4:	e029      	b.n	80002fa <selectPinFunction+0x6a>
	if(pin < 0 || pin >= port->portIONbr)
 80002a6:	68bb      	ldr	r3, [r7, #8]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	db05      	blt.n	80002b8 <selectPinFunction+0x28>
 80002ac:	68fb      	ldr	r3, [r7, #12]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	461a      	mov	r2, r3
 80002b2:	68bb      	ldr	r3, [r7, #8]
 80002b4:	4293      	cmp	r3, r2
 80002b6:	db01      	blt.n	80002bc <selectPinFunction+0x2c>
		return 2;
 80002b8:	2302      	movs	r3, #2
 80002ba:	e01e      	b.n	80002fa <selectPinFunction+0x6a>

	*port->pPortModeReg &= ~(3 << pin * 2);
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	689b      	ldr	r3, [r3, #8]
 80002c0:	681a      	ldr	r2, [r3, #0]
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	2103      	movs	r1, #3
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	43db      	mvns	r3, r3
 80002ce:	4619      	mov	r1, r3
 80002d0:	68fb      	ldr	r3, [r7, #12]
 80002d2:	689b      	ldr	r3, [r3, #8]
 80002d4:	400a      	ands	r2, r1
 80002d6:	601a      	str	r2, [r3, #0]
	if(function == OUTPUT)
 80002d8:	687b      	ldr	r3, [r7, #4]
 80002da:	2b01      	cmp	r3, #1
 80002dc:	d10c      	bne.n	80002f8 <selectPinFunction+0x68>
		*port->pPortModeReg |= 1 << pin * 2;
 80002de:	68fb      	ldr	r3, [r7, #12]
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	68bb      	ldr	r3, [r7, #8]
 80002e6:	005b      	lsls	r3, r3, #1
 80002e8:	2101      	movs	r1, #1
 80002ea:	fa01 f303 	lsl.w	r3, r1, r3
 80002ee:	4619      	mov	r1, r3
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	430a      	orrs	r2, r1
 80002f6:	601a      	str	r2, [r3, #0]
	return 0;
 80002f8:	2300      	movs	r3, #0
}
 80002fa:	4618      	mov	r0, r3
 80002fc:	3714      	adds	r7, #20
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr

08000306 <setPin>:

int setPin(GPIOPort * port, int pin)
{
 8000306:	b480      	push	{r7}
 8000308:	b083      	sub	sp, #12
 800030a:	af00      	add	r7, sp, #0
 800030c:	6078      	str	r0, [r7, #4]
 800030e:	6039      	str	r1, [r7, #0]
	if(port == NULL)
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	2b00      	cmp	r3, #0
 8000314:	d101      	bne.n	800031a <setPin+0x14>
		return 1;
 8000316:	2301      	movs	r3, #1
 8000318:	e017      	b.n	800034a <setPin+0x44>
	if(pin < 0 || pin >= port->portIONbr)
 800031a:	683b      	ldr	r3, [r7, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	db05      	blt.n	800032c <setPin+0x26>
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	781b      	ldrb	r3, [r3, #0]
 8000324:	461a      	mov	r2, r3
 8000326:	683b      	ldr	r3, [r7, #0]
 8000328:	4293      	cmp	r3, r2
 800032a:	db01      	blt.n	8000330 <setPin+0x2a>
		return 2;
 800032c:	2302      	movs	r3, #2
 800032e:	e00c      	b.n	800034a <setPin+0x44>

	*port->pPortOutDataReg |= 1 << pin;
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	69db      	ldr	r3, [r3, #28]
 8000334:	681a      	ldr	r2, [r3, #0]
 8000336:	2101      	movs	r1, #1
 8000338:	683b      	ldr	r3, [r7, #0]
 800033a:	fa01 f303 	lsl.w	r3, r1, r3
 800033e:	4619      	mov	r1, r3
 8000340:	687b      	ldr	r3, [r7, #4]
 8000342:	69db      	ldr	r3, [r3, #28]
 8000344:	430a      	orrs	r2, r1
 8000346:	601a      	str	r2, [r3, #0]
	return 0;
 8000348:	2300      	movs	r3, #0
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr

08000356 <clearPin>:

int clearPin(GPIOPort * port, int pin)
{
 8000356:	b480      	push	{r7}
 8000358:	b083      	sub	sp, #12
 800035a:	af00      	add	r7, sp, #0
 800035c:	6078      	str	r0, [r7, #4]
 800035e:	6039      	str	r1, [r7, #0]
	if(port == NULL)
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	2b00      	cmp	r3, #0
 8000364:	d101      	bne.n	800036a <clearPin+0x14>
		return 1;
 8000366:	2301      	movs	r3, #1
 8000368:	e018      	b.n	800039c <clearPin+0x46>
	if(pin < 0 || pin >= port->portIONbr)
 800036a:	683b      	ldr	r3, [r7, #0]
 800036c:	2b00      	cmp	r3, #0
 800036e:	db05      	blt.n	800037c <clearPin+0x26>
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	461a      	mov	r2, r3
 8000376:	683b      	ldr	r3, [r7, #0]
 8000378:	4293      	cmp	r3, r2
 800037a:	db01      	blt.n	8000380 <clearPin+0x2a>
		return 2;
 800037c:	2302      	movs	r3, #2
 800037e:	e00d      	b.n	800039c <clearPin+0x46>

	*port->pPortOutDataReg &= ~(1 << pin);
 8000380:	687b      	ldr	r3, [r7, #4]
 8000382:	69db      	ldr	r3, [r3, #28]
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	2101      	movs	r1, #1
 8000388:	683b      	ldr	r3, [r7, #0]
 800038a:	fa01 f303 	lsl.w	r3, r1, r3
 800038e:	43db      	mvns	r3, r3
 8000390:	4619      	mov	r1, r3
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	69db      	ldr	r3, [r3, #28]
 8000396:	400a      	ands	r2, r1
 8000398:	601a      	str	r2, [r3, #0]
	return 0;
 800039a:	2300      	movs	r3, #0
}
 800039c:	4618      	mov	r0, r3
 800039e:	370c      	adds	r7, #12
 80003a0:	46bd      	mov	sp, r7
 80003a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a6:	4770      	bx	lr

080003a8 <dim_led>:
 * 	- int ratioHigh:	the time ratio we want the pin HIGH, from 0 to 1000.
 * 	- int cycleNbr:		the duration we want to set this intensity, in number of cycles (0 for infinity).
 * 	- int keepHigh:		1 if we want to keep the pin HIGH at the end of sequence.
 * */
void dim_led(GPIOPort *port, int ledPin, int ratioHigh, int cycleNbr, int keepHigh)
{
 80003a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80003ac:	b090      	sub	sp, #64	; 0x40
 80003ae:	af00      	add	r7, sp, #0
 80003b0:	6278      	str	r0, [r7, #36]	; 0x24
 80003b2:	6239      	str	r1, [r7, #32]
 80003b4:	61fa      	str	r2, [r7, #28]
 80003b6:	61bb      	str	r3, [r7, #24]
	uint64_t ticks_cntr 		= 0;
 80003b8:	f04f 0200 	mov.w	r2, #0
 80003bc:	f04f 0300 	mov.w	r3, #0
 80003c0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	uint64_t prev_ticks_cntr	= 0;
 80003c4:	f04f 0200 	mov.w	r2, #0
 80003c8:	f04f 0300 	mov.w	r3, #0
 80003cc:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
	int dim_delay 				= 1000;
 80003d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80003d4:	62fb      	str	r3, [r7, #44]	; 0x2c

	while (cycleNbr != 0 ? ticks_cntr <= cycleNbr : 1)
 80003d6:	e03d      	b.n	8000454 <dim_led+0xac>
	{
		// When dim delay is reached, set the pin to HIGH
		if (ticks_cntr - prev_ticks_cntr >= dim_delay)
 80003d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80003dc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0503 	sbc.w	r5, r1, r3
 80003e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80003e8:	17da      	asrs	r2, r3, #31
 80003ea:	613b      	str	r3, [r7, #16]
 80003ec:	617a      	str	r2, [r7, #20]
 80003ee:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80003f2:	460b      	mov	r3, r1
 80003f4:	429c      	cmp	r4, r3
 80003f6:	4613      	mov	r3, r2
 80003f8:	eb75 0303 	sbcs.w	r3, r5, r3
 80003fc:	d307      	bcc.n	800040e <dim_led+0x66>
		{
			setPin(port, ledPin);
 80003fe:	6a39      	ldr	r1, [r7, #32]
 8000400:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000402:	f7ff ff80 	bl	8000306 <setPin>

			// Update previous tick counter
			prev_ticks_cntr = ticks_cntr;
 8000406:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800040a:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
		}
		if (ticks_cntr - prev_ticks_cntr >= ratioHigh)
 800040e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8000412:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8000416:	ebb0 0802 	subs.w	r8, r0, r2
 800041a:	eb61 0903 	sbc.w	r9, r1, r3
 800041e:	69fb      	ldr	r3, [r7, #28]
 8000420:	17da      	asrs	r2, r3, #31
 8000422:	60bb      	str	r3, [r7, #8]
 8000424:	60fa      	str	r2, [r7, #12]
 8000426:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800042a:	460b      	mov	r3, r1
 800042c:	4598      	cmp	r8, r3
 800042e:	4613      	mov	r3, r2
 8000430:	eb79 0303 	sbcs.w	r3, r9, r3
 8000434:	d303      	bcc.n	800043e <dim_led+0x96>
			clearPin(port, ledPin);
 8000436:	6a39      	ldr	r1, [r7, #32]
 8000438:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800043a:	f7ff ff8c 	bl	8000356 <clearPin>

		ticks_cntr++;
 800043e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000442:	1c51      	adds	r1, r2, #1
 8000444:	6039      	str	r1, [r7, #0]
 8000446:	f143 0300 	adc.w	r3, r3, #0
 800044a:	607b      	str	r3, [r7, #4]
 800044c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000450:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
	while (cycleNbr != 0 ? ticks_cntr <= cycleNbr : 1)
 8000454:	69bb      	ldr	r3, [r7, #24]
 8000456:	2b00      	cmp	r3, #0
 8000458:	d0be      	beq.n	80003d8 <dim_led+0x30>
 800045a:	69bb      	ldr	r3, [r7, #24]
 800045c:	17da      	asrs	r2, r3, #31
 800045e:	469a      	mov	sl, r3
 8000460:	4693      	mov	fp, r2
 8000462:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8000466:	4592      	cmp	sl, r2
 8000468:	eb7b 0303 	sbcs.w	r3, fp, r3
 800046c:	d2b4      	bcs.n	80003d8 <dim_led+0x30>
	}
	if (!keepHigh)
 800046e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000470:	2b00      	cmp	r3, #0
 8000472:	d103      	bne.n	800047c <dim_led+0xd4>
		// Shut down LED before to leave
		clearPin(port, ledPin);
 8000474:	6a39      	ldr	r1, [r7, #32]
 8000476:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000478:	f7ff ff6d 	bl	8000356 <clearPin>
}
 800047c:	bf00      	nop
 800047e:	3740      	adds	r7, #64	; 0x40
 8000480:	46bd      	mov	sp, r7
 8000482:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08000486 <pulse_led>:
 * 	- GPIOPort *port:	pointer to the port where the pin is linked to.
 * 	- int ledPin:		the pin we want to drive.
 * 	- int cycleNbr:		how much times we want to call dim_led() (0 for infinity).
 * */
void pulse_led(GPIOPort *port, int ledPin, int cycleNbr)
{
 8000486:	b580      	push	{r7, lr}
 8000488:	b08a      	sub	sp, #40	; 0x28
 800048a:	af02      	add	r7, sp, #8
 800048c:	60f8      	str	r0, [r7, #12]
 800048e:	60b9      	str	r1, [r7, #8]
 8000490:	607a      	str	r2, [r7, #4]
	int ratioHigh 		= 500;
 8000492:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000496:	61fb      	str	r3, [r7, #28]
	int ratioEvolution 	= 1;
 8000498:	2301      	movs	r3, #1
 800049a:	61bb      	str	r3, [r7, #24]
	int dimCycleNbr 	= 5000;
 800049c:	f241 3388 	movw	r3, #5000	; 0x1388
 80004a0:	617b      	str	r3, [r7, #20]
	int loopCntr		= 0;
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]

	while (cycleNbr != 0 ? loopCntr < cycleNbr : 1)
 80004a6:	e01c      	b.n	80004e2 <pulse_led+0x5c>
	{
		dim_led(port, ledPin, ratioHigh, dimCycleNbr, 1);
 80004a8:	2301      	movs	r3, #1
 80004aa:	9300      	str	r3, [sp, #0]
 80004ac:	697b      	ldr	r3, [r7, #20]
 80004ae:	69fa      	ldr	r2, [r7, #28]
 80004b0:	68b9      	ldr	r1, [r7, #8]
 80004b2:	68f8      	ldr	r0, [r7, #12]
 80004b4:	f7ff ff78 	bl	80003a8 <dim_led>
		// Increase or decrease the value of ratioHigh.
		if (ratioEvolution == 1)
 80004b8:	69bb      	ldr	r3, [r7, #24]
 80004ba:	2b01      	cmp	r3, #1
 80004bc:	d103      	bne.n	80004c6 <pulse_led+0x40>
			ratioHigh += 20;
 80004be:	69fb      	ldr	r3, [r7, #28]
 80004c0:	3314      	adds	r3, #20
 80004c2:	61fb      	str	r3, [r7, #28]
 80004c4:	e002      	b.n	80004cc <pulse_led+0x46>
		else
			ratioHigh -= 20;
 80004c6:	69fb      	ldr	r3, [r7, #28]
 80004c8:	3b14      	subs	r3, #20
 80004ca:	61fb      	str	r3, [r7, #28]
		// Update ratioEvolution when boundaries are reached.
		if (ratioHigh >= 1000)
 80004cc:	69fb      	ldr	r3, [r7, #28]
 80004ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80004d2:	db01      	blt.n	80004d8 <pulse_led+0x52>
			ratioEvolution = 0;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
		if (ratioHigh <= 0)
 80004d8:	69fb      	ldr	r3, [r7, #28]
 80004da:	2b00      	cmp	r3, #0
 80004dc:	dc01      	bgt.n	80004e2 <pulse_led+0x5c>
			ratioEvolution = 1;
 80004de:	2301      	movs	r3, #1
 80004e0:	61bb      	str	r3, [r7, #24]
	while (cycleNbr != 0 ? loopCntr < cycleNbr : 1)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d0df      	beq.n	80004a8 <pulse_led+0x22>
 80004e8:	693a      	ldr	r2, [r7, #16]
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	429a      	cmp	r2, r3
 80004ee:	dbdb      	blt.n	80004a8 <pulse_led+0x22>
	}
}
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	3720      	adds	r7, #32
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <main>:

#include "gpio_ports.h"
#include "led_mgr.h"

int main(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
	const int LEDPIN 			= 13;
 8000502:	230d      	movs	r3, #13
 8000504:	607b      	str	r3, [r7, #4]

	printf("Initializing GPIO port %c...\n", GPIOPortB.portIndex);
 8000506:	4b0f      	ldr	r3, [pc, #60]	; (8000544 <main+0x48>)
 8000508:	785b      	ldrb	r3, [r3, #1]
 800050a:	4619      	mov	r1, r3
 800050c:	480e      	ldr	r0, [pc, #56]	; (8000548 <main+0x4c>)
 800050e:	f000 f9af 	bl	8000870 <iprintf>
	activatePort(&GPIOPortB);
 8000512:	480c      	ldr	r0, [pc, #48]	; (8000544 <main+0x48>)
 8000514:	f7ff fea4 	bl	8000260 <activatePort>
	selectPinFunction(&GPIOPortB, LEDPIN, 1);
 8000518:	2201      	movs	r2, #1
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	4809      	ldr	r0, [pc, #36]	; (8000544 <main+0x48>)
 800051e:	f7ff feb7 	bl	8000290 <selectPinFunction>
	printf("GPIO port %c initialized.\n", GPIOPortB.portIndex);
 8000522:	4b08      	ldr	r3, [pc, #32]	; (8000544 <main+0x48>)
 8000524:	785b      	ldrb	r3, [r3, #1]
 8000526:	4619      	mov	r1, r3
 8000528:	4808      	ldr	r0, [pc, #32]	; (800054c <main+0x50>)
 800052a:	f000 f9a1 	bl	8000870 <iprintf>

	pulse_led(&GPIOPortB, LEDPIN, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	6879      	ldr	r1, [r7, #4]
 8000532:	4804      	ldr	r0, [pc, #16]	; (8000544 <main+0x48>)
 8000534:	f7ff ffa7 	bl	8000486 <pulse_led>
 8000538:	2300      	movs	r3, #0
}
 800053a:	4618      	mov	r0, r3
 800053c:	3708      	adds	r7, #8
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}
 8000542:	bf00      	nop
 8000544:	20000000 	.word	0x20000000
 8000548:	08001574 	.word	0x08001574
 800054c:	08001594 	.word	0x08001594

08000550 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b086      	sub	sp, #24
 8000554:	af00      	add	r7, sp, #0
 8000556:	60f8      	str	r0, [r7, #12]
 8000558:	60b9      	str	r1, [r7, #8]
 800055a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
 8000560:	e00a      	b.n	8000578 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000562:	f3af 8000 	nop.w
 8000566:	4601      	mov	r1, r0
 8000568:	68bb      	ldr	r3, [r7, #8]
 800056a:	1c5a      	adds	r2, r3, #1
 800056c:	60ba      	str	r2, [r7, #8]
 800056e:	b2ca      	uxtb	r2, r1
 8000570:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000572:	697b      	ldr	r3, [r7, #20]
 8000574:	3301      	adds	r3, #1
 8000576:	617b      	str	r3, [r7, #20]
 8000578:	697a      	ldr	r2, [r7, #20]
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	429a      	cmp	r2, r3
 800057e:	dbf0      	blt.n	8000562 <_read+0x12>
  }

  return len;
 8000580:	687b      	ldr	r3, [r7, #4]
}
 8000582:	4618      	mov	r0, r3
 8000584:	3718      	adds	r7, #24
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}

0800058a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800058a:	b580      	push	{r7, lr}
 800058c:	b086      	sub	sp, #24
 800058e:	af00      	add	r7, sp, #0
 8000590:	60f8      	str	r0, [r7, #12]
 8000592:	60b9      	str	r1, [r7, #8]
 8000594:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000596:	2300      	movs	r3, #0
 8000598:	617b      	str	r3, [r7, #20]
 800059a:	e009      	b.n	80005b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	1c5a      	adds	r2, r3, #1
 80005a0:	60ba      	str	r2, [r7, #8]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4618      	mov	r0, r3
 80005a6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80005aa:	697b      	ldr	r3, [r7, #20]
 80005ac:	3301      	adds	r3, #1
 80005ae:	617b      	str	r3, [r7, #20]
 80005b0:	697a      	ldr	r2, [r7, #20]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	429a      	cmp	r2, r3
 80005b6:	dbf1      	blt.n	800059c <_write+0x12>
  }
  return len;
 80005b8:	687b      	ldr	r3, [r7, #4]
}
 80005ba:	4618      	mov	r0, r3
 80005bc:	3718      	adds	r7, #24
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <_close>:

int _close(int file)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b083      	sub	sp, #12
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80005ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80005ce:	4618      	mov	r0, r3
 80005d0:	370c      	adds	r7, #12
 80005d2:	46bd      	mov	sp, r7
 80005d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d8:	4770      	bx	lr

080005da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80005da:	b480      	push	{r7}
 80005dc:	b083      	sub	sp, #12
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
 80005e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005ea:	605a      	str	r2, [r3, #4]
  return 0;
 80005ec:	2300      	movs	r3, #0
}
 80005ee:	4618      	mov	r0, r3
 80005f0:	370c      	adds	r7, #12
 80005f2:	46bd      	mov	sp, r7
 80005f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f8:	4770      	bx	lr

080005fa <_isatty>:

int _isatty(int file)
{
 80005fa:	b480      	push	{r7}
 80005fc:	b083      	sub	sp, #12
 80005fe:	af00      	add	r7, sp, #0
 8000600:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000602:	2301      	movs	r3, #1
}
 8000604:	4618      	mov	r0, r3
 8000606:	370c      	adds	r7, #12
 8000608:	46bd      	mov	sp, r7
 800060a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060e:	4770      	bx	lr

08000610 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000610:	b480      	push	{r7}
 8000612:	b085      	sub	sp, #20
 8000614:	af00      	add	r7, sp, #0
 8000616:	60f8      	str	r0, [r7, #12]
 8000618:	60b9      	str	r1, [r7, #8]
 800061a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800061c:	2300      	movs	r3, #0
}
 800061e:	4618      	mov	r0, r3
 8000620:	3714      	adds	r7, #20
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
	...

0800062c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000634:	4a14      	ldr	r2, [pc, #80]	; (8000688 <_sbrk+0x5c>)
 8000636:	4b15      	ldr	r3, [pc, #84]	; (800068c <_sbrk+0x60>)
 8000638:	1ad3      	subs	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800063c:	697b      	ldr	r3, [r7, #20]
 800063e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000640:	4b13      	ldr	r3, [pc, #76]	; (8000690 <_sbrk+0x64>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d102      	bne.n	800064e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000648:	4b11      	ldr	r3, [pc, #68]	; (8000690 <_sbrk+0x64>)
 800064a:	4a12      	ldr	r2, [pc, #72]	; (8000694 <_sbrk+0x68>)
 800064c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800064e:	4b10      	ldr	r3, [pc, #64]	; (8000690 <_sbrk+0x64>)
 8000650:	681a      	ldr	r2, [r3, #0]
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	429a      	cmp	r2, r3
 800065a:	d207      	bcs.n	800066c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800065c:	f000 f9ac 	bl	80009b8 <__errno>
 8000660:	4603      	mov	r3, r0
 8000662:	220c      	movs	r2, #12
 8000664:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	e009      	b.n	8000680 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800066c:	4b08      	ldr	r3, [pc, #32]	; (8000690 <_sbrk+0x64>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000672:	4b07      	ldr	r3, [pc, #28]	; (8000690 <_sbrk+0x64>)
 8000674:	681a      	ldr	r2, [r3, #0]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4413      	add	r3, r2
 800067a:	4a05      	ldr	r2, [pc, #20]	; (8000690 <_sbrk+0x64>)
 800067c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800067e:	68fb      	ldr	r3, [r7, #12]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3718      	adds	r7, #24
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20004000 	.word	0x20004000
 800068c:	00000400 	.word	0x00000400
 8000690:	2000009c 	.word	0x2000009c
 8000694:	200001f0 	.word	0x200001f0

08000698 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000698:	480d      	ldr	r0, [pc, #52]	; (80006d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800069a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800069c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006a0:	480c      	ldr	r0, [pc, #48]	; (80006d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80006a2:	490d      	ldr	r1, [pc, #52]	; (80006d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <LoopForever+0xe>)
  movs r3, #0
 80006a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006a8:	e002      	b.n	80006b0 <LoopCopyDataInit>

080006aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ae:	3304      	adds	r3, #4

080006b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006b4:	d3f9      	bcc.n	80006aa <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006b6:	4a0a      	ldr	r2, [pc, #40]	; (80006e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80006b8:	4c0a      	ldr	r4, [pc, #40]	; (80006e4 <LoopForever+0x16>)
  movs r3, #0
 80006ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006bc:	e001      	b.n	80006c2 <LoopFillZerobss>

080006be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006c0:	3204      	adds	r2, #4

080006c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006c4:	d3fb      	bcc.n	80006be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006c6:	f000 f97d 	bl	80009c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006ca:	f7ff ff17 	bl	80004fc <main>

080006ce <LoopForever>:

LoopForever:
  b LoopForever
 80006ce:	e7fe      	b.n	80006ce <LoopForever>
  ldr   r0, =_estack
 80006d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80006d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006d8:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 80006dc:	080015ec 	.word	0x080015ec
  ldr r2, =_sbss
 80006e0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80006e4:	200001ec 	.word	0x200001ec

080006e8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006e8:	e7fe      	b.n	80006e8 <ADC1_2_IRQHandler>
	...

080006ec <std>:
 80006ec:	2300      	movs	r3, #0
 80006ee:	b510      	push	{r4, lr}
 80006f0:	4604      	mov	r4, r0
 80006f2:	e9c0 3300 	strd	r3, r3, [r0]
 80006f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006fa:	6083      	str	r3, [r0, #8]
 80006fc:	8181      	strh	r1, [r0, #12]
 80006fe:	6643      	str	r3, [r0, #100]	; 0x64
 8000700:	81c2      	strh	r2, [r0, #14]
 8000702:	6183      	str	r3, [r0, #24]
 8000704:	4619      	mov	r1, r3
 8000706:	2208      	movs	r2, #8
 8000708:	305c      	adds	r0, #92	; 0x5c
 800070a:	f000 f906 	bl	800091a <memset>
 800070e:	4b0d      	ldr	r3, [pc, #52]	; (8000744 <std+0x58>)
 8000710:	6263      	str	r3, [r4, #36]	; 0x24
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <std+0x5c>)
 8000714:	62a3      	str	r3, [r4, #40]	; 0x28
 8000716:	4b0d      	ldr	r3, [pc, #52]	; (800074c <std+0x60>)
 8000718:	62e3      	str	r3, [r4, #44]	; 0x2c
 800071a:	4b0d      	ldr	r3, [pc, #52]	; (8000750 <std+0x64>)
 800071c:	6323      	str	r3, [r4, #48]	; 0x30
 800071e:	4b0d      	ldr	r3, [pc, #52]	; (8000754 <std+0x68>)
 8000720:	6224      	str	r4, [r4, #32]
 8000722:	429c      	cmp	r4, r3
 8000724:	d006      	beq.n	8000734 <std+0x48>
 8000726:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800072a:	4294      	cmp	r4, r2
 800072c:	d002      	beq.n	8000734 <std+0x48>
 800072e:	33d0      	adds	r3, #208	; 0xd0
 8000730:	429c      	cmp	r4, r3
 8000732:	d105      	bne.n	8000740 <std+0x54>
 8000734:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073c:	f000 b966 	b.w	8000a0c <__retarget_lock_init_recursive>
 8000740:	bd10      	pop	{r4, pc}
 8000742:	bf00      	nop
 8000744:	08000895 	.word	0x08000895
 8000748:	080008b7 	.word	0x080008b7
 800074c:	080008ef 	.word	0x080008ef
 8000750:	08000913 	.word	0x08000913
 8000754:	200000a0 	.word	0x200000a0

08000758 <stdio_exit_handler>:
 8000758:	4a02      	ldr	r2, [pc, #8]	; (8000764 <stdio_exit_handler+0xc>)
 800075a:	4903      	ldr	r1, [pc, #12]	; (8000768 <stdio_exit_handler+0x10>)
 800075c:	4803      	ldr	r0, [pc, #12]	; (800076c <stdio_exit_handler+0x14>)
 800075e:	f000 b869 	b.w	8000834 <_fwalk_sglue>
 8000762:	bf00      	nop
 8000764:	20000024 	.word	0x20000024
 8000768:	080012b9 	.word	0x080012b9
 800076c:	20000030 	.word	0x20000030

08000770 <cleanup_stdio>:
 8000770:	6841      	ldr	r1, [r0, #4]
 8000772:	4b0c      	ldr	r3, [pc, #48]	; (80007a4 <cleanup_stdio+0x34>)
 8000774:	4299      	cmp	r1, r3
 8000776:	b510      	push	{r4, lr}
 8000778:	4604      	mov	r4, r0
 800077a:	d001      	beq.n	8000780 <cleanup_stdio+0x10>
 800077c:	f000 fd9c 	bl	80012b8 <_fflush_r>
 8000780:	68a1      	ldr	r1, [r4, #8]
 8000782:	4b09      	ldr	r3, [pc, #36]	; (80007a8 <cleanup_stdio+0x38>)
 8000784:	4299      	cmp	r1, r3
 8000786:	d002      	beq.n	800078e <cleanup_stdio+0x1e>
 8000788:	4620      	mov	r0, r4
 800078a:	f000 fd95 	bl	80012b8 <_fflush_r>
 800078e:	68e1      	ldr	r1, [r4, #12]
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <cleanup_stdio+0x3c>)
 8000792:	4299      	cmp	r1, r3
 8000794:	d004      	beq.n	80007a0 <cleanup_stdio+0x30>
 8000796:	4620      	mov	r0, r4
 8000798:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800079c:	f000 bd8c 	b.w	80012b8 <_fflush_r>
 80007a0:	bd10      	pop	{r4, pc}
 80007a2:	bf00      	nop
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	20000108 	.word	0x20000108
 80007ac:	20000170 	.word	0x20000170

080007b0 <global_stdio_init.part.0>:
 80007b0:	b510      	push	{r4, lr}
 80007b2:	4b0b      	ldr	r3, [pc, #44]	; (80007e0 <global_stdio_init.part.0+0x30>)
 80007b4:	4c0b      	ldr	r4, [pc, #44]	; (80007e4 <global_stdio_init.part.0+0x34>)
 80007b6:	4a0c      	ldr	r2, [pc, #48]	; (80007e8 <global_stdio_init.part.0+0x38>)
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	4620      	mov	r0, r4
 80007bc:	2200      	movs	r2, #0
 80007be:	2104      	movs	r1, #4
 80007c0:	f7ff ff94 	bl	80006ec <std>
 80007c4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80007c8:	2201      	movs	r2, #1
 80007ca:	2109      	movs	r1, #9
 80007cc:	f7ff ff8e 	bl	80006ec <std>
 80007d0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80007d4:	2202      	movs	r2, #2
 80007d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007da:	2112      	movs	r1, #18
 80007dc:	f7ff bf86 	b.w	80006ec <std>
 80007e0:	200001d8 	.word	0x200001d8
 80007e4:	200000a0 	.word	0x200000a0
 80007e8:	08000759 	.word	0x08000759

080007ec <__sfp_lock_acquire>:
 80007ec:	4801      	ldr	r0, [pc, #4]	; (80007f4 <__sfp_lock_acquire+0x8>)
 80007ee:	f000 b90e 	b.w	8000a0e <__retarget_lock_acquire_recursive>
 80007f2:	bf00      	nop
 80007f4:	200001e1 	.word	0x200001e1

080007f8 <__sfp_lock_release>:
 80007f8:	4801      	ldr	r0, [pc, #4]	; (8000800 <__sfp_lock_release+0x8>)
 80007fa:	f000 b909 	b.w	8000a10 <__retarget_lock_release_recursive>
 80007fe:	bf00      	nop
 8000800:	200001e1 	.word	0x200001e1

08000804 <__sinit>:
 8000804:	b510      	push	{r4, lr}
 8000806:	4604      	mov	r4, r0
 8000808:	f7ff fff0 	bl	80007ec <__sfp_lock_acquire>
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	b11b      	cbz	r3, 8000818 <__sinit+0x14>
 8000810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000814:	f7ff bff0 	b.w	80007f8 <__sfp_lock_release>
 8000818:	4b04      	ldr	r3, [pc, #16]	; (800082c <__sinit+0x28>)
 800081a:	6223      	str	r3, [r4, #32]
 800081c:	4b04      	ldr	r3, [pc, #16]	; (8000830 <__sinit+0x2c>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	2b00      	cmp	r3, #0
 8000822:	d1f5      	bne.n	8000810 <__sinit+0xc>
 8000824:	f7ff ffc4 	bl	80007b0 <global_stdio_init.part.0>
 8000828:	e7f2      	b.n	8000810 <__sinit+0xc>
 800082a:	bf00      	nop
 800082c:	08000771 	.word	0x08000771
 8000830:	200001d8 	.word	0x200001d8

08000834 <_fwalk_sglue>:
 8000834:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000838:	4607      	mov	r7, r0
 800083a:	4688      	mov	r8, r1
 800083c:	4614      	mov	r4, r2
 800083e:	2600      	movs	r6, #0
 8000840:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000844:	f1b9 0901 	subs.w	r9, r9, #1
 8000848:	d505      	bpl.n	8000856 <_fwalk_sglue+0x22>
 800084a:	6824      	ldr	r4, [r4, #0]
 800084c:	2c00      	cmp	r4, #0
 800084e:	d1f7      	bne.n	8000840 <_fwalk_sglue+0xc>
 8000850:	4630      	mov	r0, r6
 8000852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000856:	89ab      	ldrh	r3, [r5, #12]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d907      	bls.n	800086c <_fwalk_sglue+0x38>
 800085c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000860:	3301      	adds	r3, #1
 8000862:	d003      	beq.n	800086c <_fwalk_sglue+0x38>
 8000864:	4629      	mov	r1, r5
 8000866:	4638      	mov	r0, r7
 8000868:	47c0      	blx	r8
 800086a:	4306      	orrs	r6, r0
 800086c:	3568      	adds	r5, #104	; 0x68
 800086e:	e7e9      	b.n	8000844 <_fwalk_sglue+0x10>

08000870 <iprintf>:
 8000870:	b40f      	push	{r0, r1, r2, r3}
 8000872:	b507      	push	{r0, r1, r2, lr}
 8000874:	4906      	ldr	r1, [pc, #24]	; (8000890 <iprintf+0x20>)
 8000876:	ab04      	add	r3, sp, #16
 8000878:	6808      	ldr	r0, [r1, #0]
 800087a:	f853 2b04 	ldr.w	r2, [r3], #4
 800087e:	6881      	ldr	r1, [r0, #8]
 8000880:	9301      	str	r3, [sp, #4]
 8000882:	f000 f9e9 	bl	8000c58 <_vfiprintf_r>
 8000886:	b003      	add	sp, #12
 8000888:	f85d eb04 	ldr.w	lr, [sp], #4
 800088c:	b004      	add	sp, #16
 800088e:	4770      	bx	lr
 8000890:	2000007c 	.word	0x2000007c

08000894 <__sread>:
 8000894:	b510      	push	{r4, lr}
 8000896:	460c      	mov	r4, r1
 8000898:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800089c:	f000 f868 	bl	8000970 <_read_r>
 80008a0:	2800      	cmp	r0, #0
 80008a2:	bfab      	itete	ge
 80008a4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80008a6:	89a3      	ldrhlt	r3, [r4, #12]
 80008a8:	181b      	addge	r3, r3, r0
 80008aa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80008ae:	bfac      	ite	ge
 80008b0:	6563      	strge	r3, [r4, #84]	; 0x54
 80008b2:	81a3      	strhlt	r3, [r4, #12]
 80008b4:	bd10      	pop	{r4, pc}

080008b6 <__swrite>:
 80008b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80008ba:	461f      	mov	r7, r3
 80008bc:	898b      	ldrh	r3, [r1, #12]
 80008be:	05db      	lsls	r3, r3, #23
 80008c0:	4605      	mov	r5, r0
 80008c2:	460c      	mov	r4, r1
 80008c4:	4616      	mov	r6, r2
 80008c6:	d505      	bpl.n	80008d4 <__swrite+0x1e>
 80008c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008cc:	2302      	movs	r3, #2
 80008ce:	2200      	movs	r2, #0
 80008d0:	f000 f83c 	bl	800094c <_lseek_r>
 80008d4:	89a3      	ldrh	r3, [r4, #12]
 80008d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80008da:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008de:	81a3      	strh	r3, [r4, #12]
 80008e0:	4632      	mov	r2, r6
 80008e2:	463b      	mov	r3, r7
 80008e4:	4628      	mov	r0, r5
 80008e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80008ea:	f000 b853 	b.w	8000994 <_write_r>

080008ee <__sseek>:
 80008ee:	b510      	push	{r4, lr}
 80008f0:	460c      	mov	r4, r1
 80008f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008f6:	f000 f829 	bl	800094c <_lseek_r>
 80008fa:	1c43      	adds	r3, r0, #1
 80008fc:	89a3      	ldrh	r3, [r4, #12]
 80008fe:	bf15      	itete	ne
 8000900:	6560      	strne	r0, [r4, #84]	; 0x54
 8000902:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000906:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800090a:	81a3      	strheq	r3, [r4, #12]
 800090c:	bf18      	it	ne
 800090e:	81a3      	strhne	r3, [r4, #12]
 8000910:	bd10      	pop	{r4, pc}

08000912 <__sclose>:
 8000912:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000916:	f000 b809 	b.w	800092c <_close_r>

0800091a <memset>:
 800091a:	4402      	add	r2, r0
 800091c:	4603      	mov	r3, r0
 800091e:	4293      	cmp	r3, r2
 8000920:	d100      	bne.n	8000924 <memset+0xa>
 8000922:	4770      	bx	lr
 8000924:	f803 1b01 	strb.w	r1, [r3], #1
 8000928:	e7f9      	b.n	800091e <memset+0x4>
	...

0800092c <_close_r>:
 800092c:	b538      	push	{r3, r4, r5, lr}
 800092e:	4d06      	ldr	r5, [pc, #24]	; (8000948 <_close_r+0x1c>)
 8000930:	2300      	movs	r3, #0
 8000932:	4604      	mov	r4, r0
 8000934:	4608      	mov	r0, r1
 8000936:	602b      	str	r3, [r5, #0]
 8000938:	f7ff fe43 	bl	80005c2 <_close>
 800093c:	1c43      	adds	r3, r0, #1
 800093e:	d102      	bne.n	8000946 <_close_r+0x1a>
 8000940:	682b      	ldr	r3, [r5, #0]
 8000942:	b103      	cbz	r3, 8000946 <_close_r+0x1a>
 8000944:	6023      	str	r3, [r4, #0]
 8000946:	bd38      	pop	{r3, r4, r5, pc}
 8000948:	200001dc 	.word	0x200001dc

0800094c <_lseek_r>:
 800094c:	b538      	push	{r3, r4, r5, lr}
 800094e:	4d07      	ldr	r5, [pc, #28]	; (800096c <_lseek_r+0x20>)
 8000950:	4604      	mov	r4, r0
 8000952:	4608      	mov	r0, r1
 8000954:	4611      	mov	r1, r2
 8000956:	2200      	movs	r2, #0
 8000958:	602a      	str	r2, [r5, #0]
 800095a:	461a      	mov	r2, r3
 800095c:	f7ff fe58 	bl	8000610 <_lseek>
 8000960:	1c43      	adds	r3, r0, #1
 8000962:	d102      	bne.n	800096a <_lseek_r+0x1e>
 8000964:	682b      	ldr	r3, [r5, #0]
 8000966:	b103      	cbz	r3, 800096a <_lseek_r+0x1e>
 8000968:	6023      	str	r3, [r4, #0]
 800096a:	bd38      	pop	{r3, r4, r5, pc}
 800096c:	200001dc 	.word	0x200001dc

08000970 <_read_r>:
 8000970:	b538      	push	{r3, r4, r5, lr}
 8000972:	4d07      	ldr	r5, [pc, #28]	; (8000990 <_read_r+0x20>)
 8000974:	4604      	mov	r4, r0
 8000976:	4608      	mov	r0, r1
 8000978:	4611      	mov	r1, r2
 800097a:	2200      	movs	r2, #0
 800097c:	602a      	str	r2, [r5, #0]
 800097e:	461a      	mov	r2, r3
 8000980:	f7ff fde6 	bl	8000550 <_read>
 8000984:	1c43      	adds	r3, r0, #1
 8000986:	d102      	bne.n	800098e <_read_r+0x1e>
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	b103      	cbz	r3, 800098e <_read_r+0x1e>
 800098c:	6023      	str	r3, [r4, #0]
 800098e:	bd38      	pop	{r3, r4, r5, pc}
 8000990:	200001dc 	.word	0x200001dc

08000994 <_write_r>:
 8000994:	b538      	push	{r3, r4, r5, lr}
 8000996:	4d07      	ldr	r5, [pc, #28]	; (80009b4 <_write_r+0x20>)
 8000998:	4604      	mov	r4, r0
 800099a:	4608      	mov	r0, r1
 800099c:	4611      	mov	r1, r2
 800099e:	2200      	movs	r2, #0
 80009a0:	602a      	str	r2, [r5, #0]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f7ff fdf1 	bl	800058a <_write>
 80009a8:	1c43      	adds	r3, r0, #1
 80009aa:	d102      	bne.n	80009b2 <_write_r+0x1e>
 80009ac:	682b      	ldr	r3, [r5, #0]
 80009ae:	b103      	cbz	r3, 80009b2 <_write_r+0x1e>
 80009b0:	6023      	str	r3, [r4, #0]
 80009b2:	bd38      	pop	{r3, r4, r5, pc}
 80009b4:	200001dc 	.word	0x200001dc

080009b8 <__errno>:
 80009b8:	4b01      	ldr	r3, [pc, #4]	; (80009c0 <__errno+0x8>)
 80009ba:	6818      	ldr	r0, [r3, #0]
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	2000007c 	.word	0x2000007c

080009c4 <__libc_init_array>:
 80009c4:	b570      	push	{r4, r5, r6, lr}
 80009c6:	4d0d      	ldr	r5, [pc, #52]	; (80009fc <__libc_init_array+0x38>)
 80009c8:	4c0d      	ldr	r4, [pc, #52]	; (8000a00 <__libc_init_array+0x3c>)
 80009ca:	1b64      	subs	r4, r4, r5
 80009cc:	10a4      	asrs	r4, r4, #2
 80009ce:	2600      	movs	r6, #0
 80009d0:	42a6      	cmp	r6, r4
 80009d2:	d109      	bne.n	80009e8 <__libc_init_array+0x24>
 80009d4:	4d0b      	ldr	r5, [pc, #44]	; (8000a04 <__libc_init_array+0x40>)
 80009d6:	4c0c      	ldr	r4, [pc, #48]	; (8000a08 <__libc_init_array+0x44>)
 80009d8:	f000 fdc0 	bl	800155c <_init>
 80009dc:	1b64      	subs	r4, r4, r5
 80009de:	10a4      	asrs	r4, r4, #2
 80009e0:	2600      	movs	r6, #0
 80009e2:	42a6      	cmp	r6, r4
 80009e4:	d105      	bne.n	80009f2 <__libc_init_array+0x2e>
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80009ec:	4798      	blx	r3
 80009ee:	3601      	adds	r6, #1
 80009f0:	e7ee      	b.n	80009d0 <__libc_init_array+0xc>
 80009f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80009f6:	4798      	blx	r3
 80009f8:	3601      	adds	r6, #1
 80009fa:	e7f2      	b.n	80009e2 <__libc_init_array+0x1e>
 80009fc:	080015e4 	.word	0x080015e4
 8000a00:	080015e4 	.word	0x080015e4
 8000a04:	080015e4 	.word	0x080015e4
 8000a08:	080015e8 	.word	0x080015e8

08000a0c <__retarget_lock_init_recursive>:
 8000a0c:	4770      	bx	lr

08000a0e <__retarget_lock_acquire_recursive>:
 8000a0e:	4770      	bx	lr

08000a10 <__retarget_lock_release_recursive>:
 8000a10:	4770      	bx	lr
	...

08000a14 <_free_r>:
 8000a14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000a16:	2900      	cmp	r1, #0
 8000a18:	d044      	beq.n	8000aa4 <_free_r+0x90>
 8000a1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000a1e:	9001      	str	r0, [sp, #4]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	f1a1 0404 	sub.w	r4, r1, #4
 8000a26:	bfb8      	it	lt
 8000a28:	18e4      	addlt	r4, r4, r3
 8000a2a:	f000 f8df 	bl	8000bec <__malloc_lock>
 8000a2e:	4a1e      	ldr	r2, [pc, #120]	; (8000aa8 <_free_r+0x94>)
 8000a30:	9801      	ldr	r0, [sp, #4]
 8000a32:	6813      	ldr	r3, [r2, #0]
 8000a34:	b933      	cbnz	r3, 8000a44 <_free_r+0x30>
 8000a36:	6063      	str	r3, [r4, #4]
 8000a38:	6014      	str	r4, [r2, #0]
 8000a3a:	b003      	add	sp, #12
 8000a3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000a40:	f000 b8da 	b.w	8000bf8 <__malloc_unlock>
 8000a44:	42a3      	cmp	r3, r4
 8000a46:	d908      	bls.n	8000a5a <_free_r+0x46>
 8000a48:	6825      	ldr	r5, [r4, #0]
 8000a4a:	1961      	adds	r1, r4, r5
 8000a4c:	428b      	cmp	r3, r1
 8000a4e:	bf01      	itttt	eq
 8000a50:	6819      	ldreq	r1, [r3, #0]
 8000a52:	685b      	ldreq	r3, [r3, #4]
 8000a54:	1949      	addeq	r1, r1, r5
 8000a56:	6021      	streq	r1, [r4, #0]
 8000a58:	e7ed      	b.n	8000a36 <_free_r+0x22>
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	b10b      	cbz	r3, 8000a64 <_free_r+0x50>
 8000a60:	42a3      	cmp	r3, r4
 8000a62:	d9fa      	bls.n	8000a5a <_free_r+0x46>
 8000a64:	6811      	ldr	r1, [r2, #0]
 8000a66:	1855      	adds	r5, r2, r1
 8000a68:	42a5      	cmp	r5, r4
 8000a6a:	d10b      	bne.n	8000a84 <_free_r+0x70>
 8000a6c:	6824      	ldr	r4, [r4, #0]
 8000a6e:	4421      	add	r1, r4
 8000a70:	1854      	adds	r4, r2, r1
 8000a72:	42a3      	cmp	r3, r4
 8000a74:	6011      	str	r1, [r2, #0]
 8000a76:	d1e0      	bne.n	8000a3a <_free_r+0x26>
 8000a78:	681c      	ldr	r4, [r3, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	6053      	str	r3, [r2, #4]
 8000a7e:	440c      	add	r4, r1
 8000a80:	6014      	str	r4, [r2, #0]
 8000a82:	e7da      	b.n	8000a3a <_free_r+0x26>
 8000a84:	d902      	bls.n	8000a8c <_free_r+0x78>
 8000a86:	230c      	movs	r3, #12
 8000a88:	6003      	str	r3, [r0, #0]
 8000a8a:	e7d6      	b.n	8000a3a <_free_r+0x26>
 8000a8c:	6825      	ldr	r5, [r4, #0]
 8000a8e:	1961      	adds	r1, r4, r5
 8000a90:	428b      	cmp	r3, r1
 8000a92:	bf04      	itt	eq
 8000a94:	6819      	ldreq	r1, [r3, #0]
 8000a96:	685b      	ldreq	r3, [r3, #4]
 8000a98:	6063      	str	r3, [r4, #4]
 8000a9a:	bf04      	itt	eq
 8000a9c:	1949      	addeq	r1, r1, r5
 8000a9e:	6021      	streq	r1, [r4, #0]
 8000aa0:	6054      	str	r4, [r2, #4]
 8000aa2:	e7ca      	b.n	8000a3a <_free_r+0x26>
 8000aa4:	b003      	add	sp, #12
 8000aa6:	bd30      	pop	{r4, r5, pc}
 8000aa8:	200001e4 	.word	0x200001e4

08000aac <sbrk_aligned>:
 8000aac:	b570      	push	{r4, r5, r6, lr}
 8000aae:	4e0e      	ldr	r6, [pc, #56]	; (8000ae8 <sbrk_aligned+0x3c>)
 8000ab0:	460c      	mov	r4, r1
 8000ab2:	6831      	ldr	r1, [r6, #0]
 8000ab4:	4605      	mov	r5, r0
 8000ab6:	b911      	cbnz	r1, 8000abe <sbrk_aligned+0x12>
 8000ab8:	f000 fcbc 	bl	8001434 <_sbrk_r>
 8000abc:	6030      	str	r0, [r6, #0]
 8000abe:	4621      	mov	r1, r4
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	f000 fcb7 	bl	8001434 <_sbrk_r>
 8000ac6:	1c43      	adds	r3, r0, #1
 8000ac8:	d00a      	beq.n	8000ae0 <sbrk_aligned+0x34>
 8000aca:	1cc4      	adds	r4, r0, #3
 8000acc:	f024 0403 	bic.w	r4, r4, #3
 8000ad0:	42a0      	cmp	r0, r4
 8000ad2:	d007      	beq.n	8000ae4 <sbrk_aligned+0x38>
 8000ad4:	1a21      	subs	r1, r4, r0
 8000ad6:	4628      	mov	r0, r5
 8000ad8:	f000 fcac 	bl	8001434 <_sbrk_r>
 8000adc:	3001      	adds	r0, #1
 8000ade:	d101      	bne.n	8000ae4 <sbrk_aligned+0x38>
 8000ae0:	f04f 34ff 	mov.w	r4, #4294967295
 8000ae4:	4620      	mov	r0, r4
 8000ae6:	bd70      	pop	{r4, r5, r6, pc}
 8000ae8:	200001e8 	.word	0x200001e8

08000aec <_malloc_r>:
 8000aec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000af0:	1ccd      	adds	r5, r1, #3
 8000af2:	f025 0503 	bic.w	r5, r5, #3
 8000af6:	3508      	adds	r5, #8
 8000af8:	2d0c      	cmp	r5, #12
 8000afa:	bf38      	it	cc
 8000afc:	250c      	movcc	r5, #12
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	4607      	mov	r7, r0
 8000b02:	db01      	blt.n	8000b08 <_malloc_r+0x1c>
 8000b04:	42a9      	cmp	r1, r5
 8000b06:	d905      	bls.n	8000b14 <_malloc_r+0x28>
 8000b08:	230c      	movs	r3, #12
 8000b0a:	603b      	str	r3, [r7, #0]
 8000b0c:	2600      	movs	r6, #0
 8000b0e:	4630      	mov	r0, r6
 8000b10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000be8 <_malloc_r+0xfc>
 8000b18:	f000 f868 	bl	8000bec <__malloc_lock>
 8000b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8000b20:	461c      	mov	r4, r3
 8000b22:	bb5c      	cbnz	r4, 8000b7c <_malloc_r+0x90>
 8000b24:	4629      	mov	r1, r5
 8000b26:	4638      	mov	r0, r7
 8000b28:	f7ff ffc0 	bl	8000aac <sbrk_aligned>
 8000b2c:	1c43      	adds	r3, r0, #1
 8000b2e:	4604      	mov	r4, r0
 8000b30:	d155      	bne.n	8000bde <_malloc_r+0xf2>
 8000b32:	f8d8 4000 	ldr.w	r4, [r8]
 8000b36:	4626      	mov	r6, r4
 8000b38:	2e00      	cmp	r6, #0
 8000b3a:	d145      	bne.n	8000bc8 <_malloc_r+0xdc>
 8000b3c:	2c00      	cmp	r4, #0
 8000b3e:	d048      	beq.n	8000bd2 <_malloc_r+0xe6>
 8000b40:	6823      	ldr	r3, [r4, #0]
 8000b42:	4631      	mov	r1, r6
 8000b44:	4638      	mov	r0, r7
 8000b46:	eb04 0903 	add.w	r9, r4, r3
 8000b4a:	f000 fc73 	bl	8001434 <_sbrk_r>
 8000b4e:	4581      	cmp	r9, r0
 8000b50:	d13f      	bne.n	8000bd2 <_malloc_r+0xe6>
 8000b52:	6821      	ldr	r1, [r4, #0]
 8000b54:	1a6d      	subs	r5, r5, r1
 8000b56:	4629      	mov	r1, r5
 8000b58:	4638      	mov	r0, r7
 8000b5a:	f7ff ffa7 	bl	8000aac <sbrk_aligned>
 8000b5e:	3001      	adds	r0, #1
 8000b60:	d037      	beq.n	8000bd2 <_malloc_r+0xe6>
 8000b62:	6823      	ldr	r3, [r4, #0]
 8000b64:	442b      	add	r3, r5
 8000b66:	6023      	str	r3, [r4, #0]
 8000b68:	f8d8 3000 	ldr.w	r3, [r8]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d038      	beq.n	8000be2 <_malloc_r+0xf6>
 8000b70:	685a      	ldr	r2, [r3, #4]
 8000b72:	42a2      	cmp	r2, r4
 8000b74:	d12b      	bne.n	8000bce <_malloc_r+0xe2>
 8000b76:	2200      	movs	r2, #0
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	e00f      	b.n	8000b9c <_malloc_r+0xb0>
 8000b7c:	6822      	ldr	r2, [r4, #0]
 8000b7e:	1b52      	subs	r2, r2, r5
 8000b80:	d41f      	bmi.n	8000bc2 <_malloc_r+0xd6>
 8000b82:	2a0b      	cmp	r2, #11
 8000b84:	d917      	bls.n	8000bb6 <_malloc_r+0xca>
 8000b86:	1961      	adds	r1, r4, r5
 8000b88:	42a3      	cmp	r3, r4
 8000b8a:	6025      	str	r5, [r4, #0]
 8000b8c:	bf18      	it	ne
 8000b8e:	6059      	strne	r1, [r3, #4]
 8000b90:	6863      	ldr	r3, [r4, #4]
 8000b92:	bf08      	it	eq
 8000b94:	f8c8 1000 	streq.w	r1, [r8]
 8000b98:	5162      	str	r2, [r4, r5]
 8000b9a:	604b      	str	r3, [r1, #4]
 8000b9c:	4638      	mov	r0, r7
 8000b9e:	f104 060b 	add.w	r6, r4, #11
 8000ba2:	f000 f829 	bl	8000bf8 <__malloc_unlock>
 8000ba6:	f026 0607 	bic.w	r6, r6, #7
 8000baa:	1d23      	adds	r3, r4, #4
 8000bac:	1af2      	subs	r2, r6, r3
 8000bae:	d0ae      	beq.n	8000b0e <_malloc_r+0x22>
 8000bb0:	1b9b      	subs	r3, r3, r6
 8000bb2:	50a3      	str	r3, [r4, r2]
 8000bb4:	e7ab      	b.n	8000b0e <_malloc_r+0x22>
 8000bb6:	42a3      	cmp	r3, r4
 8000bb8:	6862      	ldr	r2, [r4, #4]
 8000bba:	d1dd      	bne.n	8000b78 <_malloc_r+0x8c>
 8000bbc:	f8c8 2000 	str.w	r2, [r8]
 8000bc0:	e7ec      	b.n	8000b9c <_malloc_r+0xb0>
 8000bc2:	4623      	mov	r3, r4
 8000bc4:	6864      	ldr	r4, [r4, #4]
 8000bc6:	e7ac      	b.n	8000b22 <_malloc_r+0x36>
 8000bc8:	4634      	mov	r4, r6
 8000bca:	6876      	ldr	r6, [r6, #4]
 8000bcc:	e7b4      	b.n	8000b38 <_malloc_r+0x4c>
 8000bce:	4613      	mov	r3, r2
 8000bd0:	e7cc      	b.n	8000b6c <_malloc_r+0x80>
 8000bd2:	230c      	movs	r3, #12
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	f000 f80e 	bl	8000bf8 <__malloc_unlock>
 8000bdc:	e797      	b.n	8000b0e <_malloc_r+0x22>
 8000bde:	6025      	str	r5, [r4, #0]
 8000be0:	e7dc      	b.n	8000b9c <_malloc_r+0xb0>
 8000be2:	605b      	str	r3, [r3, #4]
 8000be4:	deff      	udf	#255	; 0xff
 8000be6:	bf00      	nop
 8000be8:	200001e4 	.word	0x200001e4

08000bec <__malloc_lock>:
 8000bec:	4801      	ldr	r0, [pc, #4]	; (8000bf4 <__malloc_lock+0x8>)
 8000bee:	f7ff bf0e 	b.w	8000a0e <__retarget_lock_acquire_recursive>
 8000bf2:	bf00      	nop
 8000bf4:	200001e0 	.word	0x200001e0

08000bf8 <__malloc_unlock>:
 8000bf8:	4801      	ldr	r0, [pc, #4]	; (8000c00 <__malloc_unlock+0x8>)
 8000bfa:	f7ff bf09 	b.w	8000a10 <__retarget_lock_release_recursive>
 8000bfe:	bf00      	nop
 8000c00:	200001e0 	.word	0x200001e0

08000c04 <__sfputc_r>:
 8000c04:	6893      	ldr	r3, [r2, #8]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	b410      	push	{r4}
 8000c0c:	6093      	str	r3, [r2, #8]
 8000c0e:	da08      	bge.n	8000c22 <__sfputc_r+0x1e>
 8000c10:	6994      	ldr	r4, [r2, #24]
 8000c12:	42a3      	cmp	r3, r4
 8000c14:	db01      	blt.n	8000c1a <__sfputc_r+0x16>
 8000c16:	290a      	cmp	r1, #10
 8000c18:	d103      	bne.n	8000c22 <__sfputc_r+0x1e>
 8000c1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c1e:	f000 bb73 	b.w	8001308 <__swbuf_r>
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	1c58      	adds	r0, r3, #1
 8000c26:	6010      	str	r0, [r2, #0]
 8000c28:	7019      	strb	r1, [r3, #0]
 8000c2a:	4608      	mov	r0, r1
 8000c2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000c30:	4770      	bx	lr

08000c32 <__sfputs_r>:
 8000c32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c34:	4606      	mov	r6, r0
 8000c36:	460f      	mov	r7, r1
 8000c38:	4614      	mov	r4, r2
 8000c3a:	18d5      	adds	r5, r2, r3
 8000c3c:	42ac      	cmp	r4, r5
 8000c3e:	d101      	bne.n	8000c44 <__sfputs_r+0x12>
 8000c40:	2000      	movs	r0, #0
 8000c42:	e007      	b.n	8000c54 <__sfputs_r+0x22>
 8000c44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c48:	463a      	mov	r2, r7
 8000c4a:	4630      	mov	r0, r6
 8000c4c:	f7ff ffda 	bl	8000c04 <__sfputc_r>
 8000c50:	1c43      	adds	r3, r0, #1
 8000c52:	d1f3      	bne.n	8000c3c <__sfputs_r+0xa>
 8000c54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000c58 <_vfiprintf_r>:
 8000c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c5c:	460d      	mov	r5, r1
 8000c5e:	b09d      	sub	sp, #116	; 0x74
 8000c60:	4614      	mov	r4, r2
 8000c62:	4698      	mov	r8, r3
 8000c64:	4606      	mov	r6, r0
 8000c66:	b118      	cbz	r0, 8000c70 <_vfiprintf_r+0x18>
 8000c68:	6a03      	ldr	r3, [r0, #32]
 8000c6a:	b90b      	cbnz	r3, 8000c70 <_vfiprintf_r+0x18>
 8000c6c:	f7ff fdca 	bl	8000804 <__sinit>
 8000c70:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c72:	07d9      	lsls	r1, r3, #31
 8000c74:	d405      	bmi.n	8000c82 <_vfiprintf_r+0x2a>
 8000c76:	89ab      	ldrh	r3, [r5, #12]
 8000c78:	059a      	lsls	r2, r3, #22
 8000c7a:	d402      	bmi.n	8000c82 <_vfiprintf_r+0x2a>
 8000c7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000c7e:	f7ff fec6 	bl	8000a0e <__retarget_lock_acquire_recursive>
 8000c82:	89ab      	ldrh	r3, [r5, #12]
 8000c84:	071b      	lsls	r3, r3, #28
 8000c86:	d501      	bpl.n	8000c8c <_vfiprintf_r+0x34>
 8000c88:	692b      	ldr	r3, [r5, #16]
 8000c8a:	b99b      	cbnz	r3, 8000cb4 <_vfiprintf_r+0x5c>
 8000c8c:	4629      	mov	r1, r5
 8000c8e:	4630      	mov	r0, r6
 8000c90:	f000 fb78 	bl	8001384 <__swsetup_r>
 8000c94:	b170      	cbz	r0, 8000cb4 <_vfiprintf_r+0x5c>
 8000c96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c98:	07dc      	lsls	r4, r3, #31
 8000c9a:	d504      	bpl.n	8000ca6 <_vfiprintf_r+0x4e>
 8000c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca0:	b01d      	add	sp, #116	; 0x74
 8000ca2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca6:	89ab      	ldrh	r3, [r5, #12]
 8000ca8:	0598      	lsls	r0, r3, #22
 8000caa:	d4f7      	bmi.n	8000c9c <_vfiprintf_r+0x44>
 8000cac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000cae:	f7ff feaf 	bl	8000a10 <__retarget_lock_release_recursive>
 8000cb2:	e7f3      	b.n	8000c9c <_vfiprintf_r+0x44>
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	9309      	str	r3, [sp, #36]	; 0x24
 8000cb8:	2320      	movs	r3, #32
 8000cba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000cbe:	f8cd 800c 	str.w	r8, [sp, #12]
 8000cc2:	2330      	movs	r3, #48	; 0x30
 8000cc4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8000e78 <_vfiprintf_r+0x220>
 8000cc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ccc:	f04f 0901 	mov.w	r9, #1
 8000cd0:	4623      	mov	r3, r4
 8000cd2:	469a      	mov	sl, r3
 8000cd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000cd8:	b10a      	cbz	r2, 8000cde <_vfiprintf_r+0x86>
 8000cda:	2a25      	cmp	r2, #37	; 0x25
 8000cdc:	d1f9      	bne.n	8000cd2 <_vfiprintf_r+0x7a>
 8000cde:	ebba 0b04 	subs.w	fp, sl, r4
 8000ce2:	d00b      	beq.n	8000cfc <_vfiprintf_r+0xa4>
 8000ce4:	465b      	mov	r3, fp
 8000ce6:	4622      	mov	r2, r4
 8000ce8:	4629      	mov	r1, r5
 8000cea:	4630      	mov	r0, r6
 8000cec:	f7ff ffa1 	bl	8000c32 <__sfputs_r>
 8000cf0:	3001      	adds	r0, #1
 8000cf2:	f000 80a9 	beq.w	8000e48 <_vfiprintf_r+0x1f0>
 8000cf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000cf8:	445a      	add	r2, fp
 8000cfa:	9209      	str	r2, [sp, #36]	; 0x24
 8000cfc:	f89a 3000 	ldrb.w	r3, [sl]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	f000 80a1 	beq.w	8000e48 <_vfiprintf_r+0x1f0>
 8000d06:	2300      	movs	r3, #0
 8000d08:	f04f 32ff 	mov.w	r2, #4294967295
 8000d0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000d10:	f10a 0a01 	add.w	sl, sl, #1
 8000d14:	9304      	str	r3, [sp, #16]
 8000d16:	9307      	str	r3, [sp, #28]
 8000d18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000d1c:	931a      	str	r3, [sp, #104]	; 0x68
 8000d1e:	4654      	mov	r4, sl
 8000d20:	2205      	movs	r2, #5
 8000d22:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d26:	4854      	ldr	r0, [pc, #336]	; (8000e78 <_vfiprintf_r+0x220>)
 8000d28:	f7ff fa4a 	bl	80001c0 <memchr>
 8000d2c:	9a04      	ldr	r2, [sp, #16]
 8000d2e:	b9d8      	cbnz	r0, 8000d68 <_vfiprintf_r+0x110>
 8000d30:	06d1      	lsls	r1, r2, #27
 8000d32:	bf44      	itt	mi
 8000d34:	2320      	movmi	r3, #32
 8000d36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d3a:	0713      	lsls	r3, r2, #28
 8000d3c:	bf44      	itt	mi
 8000d3e:	232b      	movmi	r3, #43	; 0x2b
 8000d40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000d44:	f89a 3000 	ldrb.w	r3, [sl]
 8000d48:	2b2a      	cmp	r3, #42	; 0x2a
 8000d4a:	d015      	beq.n	8000d78 <_vfiprintf_r+0x120>
 8000d4c:	9a07      	ldr	r2, [sp, #28]
 8000d4e:	4654      	mov	r4, sl
 8000d50:	2000      	movs	r0, #0
 8000d52:	f04f 0c0a 	mov.w	ip, #10
 8000d56:	4621      	mov	r1, r4
 8000d58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000d5c:	3b30      	subs	r3, #48	; 0x30
 8000d5e:	2b09      	cmp	r3, #9
 8000d60:	d94d      	bls.n	8000dfe <_vfiprintf_r+0x1a6>
 8000d62:	b1b0      	cbz	r0, 8000d92 <_vfiprintf_r+0x13a>
 8000d64:	9207      	str	r2, [sp, #28]
 8000d66:	e014      	b.n	8000d92 <_vfiprintf_r+0x13a>
 8000d68:	eba0 0308 	sub.w	r3, r0, r8
 8000d6c:	fa09 f303 	lsl.w	r3, r9, r3
 8000d70:	4313      	orrs	r3, r2
 8000d72:	9304      	str	r3, [sp, #16]
 8000d74:	46a2      	mov	sl, r4
 8000d76:	e7d2      	b.n	8000d1e <_vfiprintf_r+0xc6>
 8000d78:	9b03      	ldr	r3, [sp, #12]
 8000d7a:	1d19      	adds	r1, r3, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	9103      	str	r1, [sp, #12]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	bfbb      	ittet	lt
 8000d84:	425b      	neglt	r3, r3
 8000d86:	f042 0202 	orrlt.w	r2, r2, #2
 8000d8a:	9307      	strge	r3, [sp, #28]
 8000d8c:	9307      	strlt	r3, [sp, #28]
 8000d8e:	bfb8      	it	lt
 8000d90:	9204      	strlt	r2, [sp, #16]
 8000d92:	7823      	ldrb	r3, [r4, #0]
 8000d94:	2b2e      	cmp	r3, #46	; 0x2e
 8000d96:	d10c      	bne.n	8000db2 <_vfiprintf_r+0x15a>
 8000d98:	7863      	ldrb	r3, [r4, #1]
 8000d9a:	2b2a      	cmp	r3, #42	; 0x2a
 8000d9c:	d134      	bne.n	8000e08 <_vfiprintf_r+0x1b0>
 8000d9e:	9b03      	ldr	r3, [sp, #12]
 8000da0:	1d1a      	adds	r2, r3, #4
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	9203      	str	r2, [sp, #12]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	bfb8      	it	lt
 8000daa:	f04f 33ff 	movlt.w	r3, #4294967295
 8000dae:	3402      	adds	r4, #2
 8000db0:	9305      	str	r3, [sp, #20]
 8000db2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8000e88 <_vfiprintf_r+0x230>
 8000db6:	7821      	ldrb	r1, [r4, #0]
 8000db8:	2203      	movs	r2, #3
 8000dba:	4650      	mov	r0, sl
 8000dbc:	f7ff fa00 	bl	80001c0 <memchr>
 8000dc0:	b138      	cbz	r0, 8000dd2 <_vfiprintf_r+0x17a>
 8000dc2:	9b04      	ldr	r3, [sp, #16]
 8000dc4:	eba0 000a 	sub.w	r0, r0, sl
 8000dc8:	2240      	movs	r2, #64	; 0x40
 8000dca:	4082      	lsls	r2, r0
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	3401      	adds	r4, #1
 8000dd0:	9304      	str	r3, [sp, #16]
 8000dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000dd6:	4829      	ldr	r0, [pc, #164]	; (8000e7c <_vfiprintf_r+0x224>)
 8000dd8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000ddc:	2206      	movs	r2, #6
 8000dde:	f7ff f9ef 	bl	80001c0 <memchr>
 8000de2:	2800      	cmp	r0, #0
 8000de4:	d03f      	beq.n	8000e66 <_vfiprintf_r+0x20e>
 8000de6:	4b26      	ldr	r3, [pc, #152]	; (8000e80 <_vfiprintf_r+0x228>)
 8000de8:	bb1b      	cbnz	r3, 8000e32 <_vfiprintf_r+0x1da>
 8000dea:	9b03      	ldr	r3, [sp, #12]
 8000dec:	3307      	adds	r3, #7
 8000dee:	f023 0307 	bic.w	r3, r3, #7
 8000df2:	3308      	adds	r3, #8
 8000df4:	9303      	str	r3, [sp, #12]
 8000df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000df8:	443b      	add	r3, r7
 8000dfa:	9309      	str	r3, [sp, #36]	; 0x24
 8000dfc:	e768      	b.n	8000cd0 <_vfiprintf_r+0x78>
 8000dfe:	fb0c 3202 	mla	r2, ip, r2, r3
 8000e02:	460c      	mov	r4, r1
 8000e04:	2001      	movs	r0, #1
 8000e06:	e7a6      	b.n	8000d56 <_vfiprintf_r+0xfe>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	3401      	adds	r4, #1
 8000e0c:	9305      	str	r3, [sp, #20]
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 0c0a 	mov.w	ip, #10
 8000e14:	4620      	mov	r0, r4
 8000e16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000e1a:	3a30      	subs	r2, #48	; 0x30
 8000e1c:	2a09      	cmp	r2, #9
 8000e1e:	d903      	bls.n	8000e28 <_vfiprintf_r+0x1d0>
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d0c6      	beq.n	8000db2 <_vfiprintf_r+0x15a>
 8000e24:	9105      	str	r1, [sp, #20]
 8000e26:	e7c4      	b.n	8000db2 <_vfiprintf_r+0x15a>
 8000e28:	fb0c 2101 	mla	r1, ip, r1, r2
 8000e2c:	4604      	mov	r4, r0
 8000e2e:	2301      	movs	r3, #1
 8000e30:	e7f0      	b.n	8000e14 <_vfiprintf_r+0x1bc>
 8000e32:	ab03      	add	r3, sp, #12
 8000e34:	9300      	str	r3, [sp, #0]
 8000e36:	462a      	mov	r2, r5
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <_vfiprintf_r+0x22c>)
 8000e3a:	a904      	add	r1, sp, #16
 8000e3c:	4630      	mov	r0, r6
 8000e3e:	f3af 8000 	nop.w
 8000e42:	4607      	mov	r7, r0
 8000e44:	1c78      	adds	r0, r7, #1
 8000e46:	d1d6      	bne.n	8000df6 <_vfiprintf_r+0x19e>
 8000e48:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e4a:	07d9      	lsls	r1, r3, #31
 8000e4c:	d405      	bmi.n	8000e5a <_vfiprintf_r+0x202>
 8000e4e:	89ab      	ldrh	r3, [r5, #12]
 8000e50:	059a      	lsls	r2, r3, #22
 8000e52:	d402      	bmi.n	8000e5a <_vfiprintf_r+0x202>
 8000e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e56:	f7ff fddb 	bl	8000a10 <__retarget_lock_release_recursive>
 8000e5a:	89ab      	ldrh	r3, [r5, #12]
 8000e5c:	065b      	lsls	r3, r3, #25
 8000e5e:	f53f af1d 	bmi.w	8000c9c <_vfiprintf_r+0x44>
 8000e62:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000e64:	e71c      	b.n	8000ca0 <_vfiprintf_r+0x48>
 8000e66:	ab03      	add	r3, sp, #12
 8000e68:	9300      	str	r3, [sp, #0]
 8000e6a:	462a      	mov	r2, r5
 8000e6c:	4b05      	ldr	r3, [pc, #20]	; (8000e84 <_vfiprintf_r+0x22c>)
 8000e6e:	a904      	add	r1, sp, #16
 8000e70:	4630      	mov	r0, r6
 8000e72:	f000 f879 	bl	8000f68 <_printf_i>
 8000e76:	e7e4      	b.n	8000e42 <_vfiprintf_r+0x1ea>
 8000e78:	080015af 	.word	0x080015af
 8000e7c:	080015b9 	.word	0x080015b9
 8000e80:	00000000 	.word	0x00000000
 8000e84:	08000c33 	.word	0x08000c33
 8000e88:	080015b5 	.word	0x080015b5

08000e8c <_printf_common>:
 8000e8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e90:	4616      	mov	r6, r2
 8000e92:	4699      	mov	r9, r3
 8000e94:	688a      	ldr	r2, [r1, #8]
 8000e96:	690b      	ldr	r3, [r1, #16]
 8000e98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000e9c:	4293      	cmp	r3, r2
 8000e9e:	bfb8      	it	lt
 8000ea0:	4613      	movlt	r3, r2
 8000ea2:	6033      	str	r3, [r6, #0]
 8000ea4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000ea8:	4607      	mov	r7, r0
 8000eaa:	460c      	mov	r4, r1
 8000eac:	b10a      	cbz	r2, 8000eb2 <_printf_common+0x26>
 8000eae:	3301      	adds	r3, #1
 8000eb0:	6033      	str	r3, [r6, #0]
 8000eb2:	6823      	ldr	r3, [r4, #0]
 8000eb4:	0699      	lsls	r1, r3, #26
 8000eb6:	bf42      	ittt	mi
 8000eb8:	6833      	ldrmi	r3, [r6, #0]
 8000eba:	3302      	addmi	r3, #2
 8000ebc:	6033      	strmi	r3, [r6, #0]
 8000ebe:	6825      	ldr	r5, [r4, #0]
 8000ec0:	f015 0506 	ands.w	r5, r5, #6
 8000ec4:	d106      	bne.n	8000ed4 <_printf_common+0x48>
 8000ec6:	f104 0a19 	add.w	sl, r4, #25
 8000eca:	68e3      	ldr	r3, [r4, #12]
 8000ecc:	6832      	ldr	r2, [r6, #0]
 8000ece:	1a9b      	subs	r3, r3, r2
 8000ed0:	42ab      	cmp	r3, r5
 8000ed2:	dc26      	bgt.n	8000f22 <_printf_common+0x96>
 8000ed4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000ed8:	1e13      	subs	r3, r2, #0
 8000eda:	6822      	ldr	r2, [r4, #0]
 8000edc:	bf18      	it	ne
 8000ede:	2301      	movne	r3, #1
 8000ee0:	0692      	lsls	r2, r2, #26
 8000ee2:	d42b      	bmi.n	8000f3c <_printf_common+0xb0>
 8000ee4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000ee8:	4649      	mov	r1, r9
 8000eea:	4638      	mov	r0, r7
 8000eec:	47c0      	blx	r8
 8000eee:	3001      	adds	r0, #1
 8000ef0:	d01e      	beq.n	8000f30 <_printf_common+0xa4>
 8000ef2:	6823      	ldr	r3, [r4, #0]
 8000ef4:	6922      	ldr	r2, [r4, #16]
 8000ef6:	f003 0306 	and.w	r3, r3, #6
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	bf02      	ittt	eq
 8000efe:	68e5      	ldreq	r5, [r4, #12]
 8000f00:	6833      	ldreq	r3, [r6, #0]
 8000f02:	1aed      	subeq	r5, r5, r3
 8000f04:	68a3      	ldr	r3, [r4, #8]
 8000f06:	bf0c      	ite	eq
 8000f08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000f0c:	2500      	movne	r5, #0
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	bfc4      	itt	gt
 8000f12:	1a9b      	subgt	r3, r3, r2
 8000f14:	18ed      	addgt	r5, r5, r3
 8000f16:	2600      	movs	r6, #0
 8000f18:	341a      	adds	r4, #26
 8000f1a:	42b5      	cmp	r5, r6
 8000f1c:	d11a      	bne.n	8000f54 <_printf_common+0xc8>
 8000f1e:	2000      	movs	r0, #0
 8000f20:	e008      	b.n	8000f34 <_printf_common+0xa8>
 8000f22:	2301      	movs	r3, #1
 8000f24:	4652      	mov	r2, sl
 8000f26:	4649      	mov	r1, r9
 8000f28:	4638      	mov	r0, r7
 8000f2a:	47c0      	blx	r8
 8000f2c:	3001      	adds	r0, #1
 8000f2e:	d103      	bne.n	8000f38 <_printf_common+0xac>
 8000f30:	f04f 30ff 	mov.w	r0, #4294967295
 8000f34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f38:	3501      	adds	r5, #1
 8000f3a:	e7c6      	b.n	8000eca <_printf_common+0x3e>
 8000f3c:	18e1      	adds	r1, r4, r3
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	2030      	movs	r0, #48	; 0x30
 8000f42:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000f46:	4422      	add	r2, r4
 8000f48:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000f4c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000f50:	3302      	adds	r3, #2
 8000f52:	e7c7      	b.n	8000ee4 <_printf_common+0x58>
 8000f54:	2301      	movs	r3, #1
 8000f56:	4622      	mov	r2, r4
 8000f58:	4649      	mov	r1, r9
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	47c0      	blx	r8
 8000f5e:	3001      	adds	r0, #1
 8000f60:	d0e6      	beq.n	8000f30 <_printf_common+0xa4>
 8000f62:	3601      	adds	r6, #1
 8000f64:	e7d9      	b.n	8000f1a <_printf_common+0x8e>
	...

08000f68 <_printf_i>:
 8000f68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000f6c:	7e0f      	ldrb	r7, [r1, #24]
 8000f6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000f70:	2f78      	cmp	r7, #120	; 0x78
 8000f72:	4691      	mov	r9, r2
 8000f74:	4680      	mov	r8, r0
 8000f76:	460c      	mov	r4, r1
 8000f78:	469a      	mov	sl, r3
 8000f7a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000f7e:	d807      	bhi.n	8000f90 <_printf_i+0x28>
 8000f80:	2f62      	cmp	r7, #98	; 0x62
 8000f82:	d80a      	bhi.n	8000f9a <_printf_i+0x32>
 8000f84:	2f00      	cmp	r7, #0
 8000f86:	f000 80d4 	beq.w	8001132 <_printf_i+0x1ca>
 8000f8a:	2f58      	cmp	r7, #88	; 0x58
 8000f8c:	f000 80c0 	beq.w	8001110 <_printf_i+0x1a8>
 8000f90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f94:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000f98:	e03a      	b.n	8001010 <_printf_i+0xa8>
 8000f9a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000f9e:	2b15      	cmp	r3, #21
 8000fa0:	d8f6      	bhi.n	8000f90 <_printf_i+0x28>
 8000fa2:	a101      	add	r1, pc, #4	; (adr r1, 8000fa8 <_printf_i+0x40>)
 8000fa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000fa8:	08001001 	.word	0x08001001
 8000fac:	08001015 	.word	0x08001015
 8000fb0:	08000f91 	.word	0x08000f91
 8000fb4:	08000f91 	.word	0x08000f91
 8000fb8:	08000f91 	.word	0x08000f91
 8000fbc:	08000f91 	.word	0x08000f91
 8000fc0:	08001015 	.word	0x08001015
 8000fc4:	08000f91 	.word	0x08000f91
 8000fc8:	08000f91 	.word	0x08000f91
 8000fcc:	08000f91 	.word	0x08000f91
 8000fd0:	08000f91 	.word	0x08000f91
 8000fd4:	08001119 	.word	0x08001119
 8000fd8:	08001041 	.word	0x08001041
 8000fdc:	080010d3 	.word	0x080010d3
 8000fe0:	08000f91 	.word	0x08000f91
 8000fe4:	08000f91 	.word	0x08000f91
 8000fe8:	0800113b 	.word	0x0800113b
 8000fec:	08000f91 	.word	0x08000f91
 8000ff0:	08001041 	.word	0x08001041
 8000ff4:	08000f91 	.word	0x08000f91
 8000ff8:	08000f91 	.word	0x08000f91
 8000ffc:	080010db 	.word	0x080010db
 8001000:	682b      	ldr	r3, [r5, #0]
 8001002:	1d1a      	adds	r2, r3, #4
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	602a      	str	r2, [r5, #0]
 8001008:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800100c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001010:	2301      	movs	r3, #1
 8001012:	e09f      	b.n	8001154 <_printf_i+0x1ec>
 8001014:	6820      	ldr	r0, [r4, #0]
 8001016:	682b      	ldr	r3, [r5, #0]
 8001018:	0607      	lsls	r7, r0, #24
 800101a:	f103 0104 	add.w	r1, r3, #4
 800101e:	6029      	str	r1, [r5, #0]
 8001020:	d501      	bpl.n	8001026 <_printf_i+0xbe>
 8001022:	681e      	ldr	r6, [r3, #0]
 8001024:	e003      	b.n	800102e <_printf_i+0xc6>
 8001026:	0646      	lsls	r6, r0, #25
 8001028:	d5fb      	bpl.n	8001022 <_printf_i+0xba>
 800102a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800102e:	2e00      	cmp	r6, #0
 8001030:	da03      	bge.n	800103a <_printf_i+0xd2>
 8001032:	232d      	movs	r3, #45	; 0x2d
 8001034:	4276      	negs	r6, r6
 8001036:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800103a:	485a      	ldr	r0, [pc, #360]	; (80011a4 <_printf_i+0x23c>)
 800103c:	230a      	movs	r3, #10
 800103e:	e012      	b.n	8001066 <_printf_i+0xfe>
 8001040:	682b      	ldr	r3, [r5, #0]
 8001042:	6820      	ldr	r0, [r4, #0]
 8001044:	1d19      	adds	r1, r3, #4
 8001046:	6029      	str	r1, [r5, #0]
 8001048:	0605      	lsls	r5, r0, #24
 800104a:	d501      	bpl.n	8001050 <_printf_i+0xe8>
 800104c:	681e      	ldr	r6, [r3, #0]
 800104e:	e002      	b.n	8001056 <_printf_i+0xee>
 8001050:	0641      	lsls	r1, r0, #25
 8001052:	d5fb      	bpl.n	800104c <_printf_i+0xe4>
 8001054:	881e      	ldrh	r6, [r3, #0]
 8001056:	4853      	ldr	r0, [pc, #332]	; (80011a4 <_printf_i+0x23c>)
 8001058:	2f6f      	cmp	r7, #111	; 0x6f
 800105a:	bf0c      	ite	eq
 800105c:	2308      	moveq	r3, #8
 800105e:	230a      	movne	r3, #10
 8001060:	2100      	movs	r1, #0
 8001062:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001066:	6865      	ldr	r5, [r4, #4]
 8001068:	60a5      	str	r5, [r4, #8]
 800106a:	2d00      	cmp	r5, #0
 800106c:	bfa2      	ittt	ge
 800106e:	6821      	ldrge	r1, [r4, #0]
 8001070:	f021 0104 	bicge.w	r1, r1, #4
 8001074:	6021      	strge	r1, [r4, #0]
 8001076:	b90e      	cbnz	r6, 800107c <_printf_i+0x114>
 8001078:	2d00      	cmp	r5, #0
 800107a:	d04b      	beq.n	8001114 <_printf_i+0x1ac>
 800107c:	4615      	mov	r5, r2
 800107e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001082:	fb03 6711 	mls	r7, r3, r1, r6
 8001086:	5dc7      	ldrb	r7, [r0, r7]
 8001088:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800108c:	4637      	mov	r7, r6
 800108e:	42bb      	cmp	r3, r7
 8001090:	460e      	mov	r6, r1
 8001092:	d9f4      	bls.n	800107e <_printf_i+0x116>
 8001094:	2b08      	cmp	r3, #8
 8001096:	d10b      	bne.n	80010b0 <_printf_i+0x148>
 8001098:	6823      	ldr	r3, [r4, #0]
 800109a:	07de      	lsls	r6, r3, #31
 800109c:	d508      	bpl.n	80010b0 <_printf_i+0x148>
 800109e:	6923      	ldr	r3, [r4, #16]
 80010a0:	6861      	ldr	r1, [r4, #4]
 80010a2:	4299      	cmp	r1, r3
 80010a4:	bfde      	ittt	le
 80010a6:	2330      	movle	r3, #48	; 0x30
 80010a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80010ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80010b0:	1b52      	subs	r2, r2, r5
 80010b2:	6122      	str	r2, [r4, #16]
 80010b4:	f8cd a000 	str.w	sl, [sp]
 80010b8:	464b      	mov	r3, r9
 80010ba:	aa03      	add	r2, sp, #12
 80010bc:	4621      	mov	r1, r4
 80010be:	4640      	mov	r0, r8
 80010c0:	f7ff fee4 	bl	8000e8c <_printf_common>
 80010c4:	3001      	adds	r0, #1
 80010c6:	d14a      	bne.n	800115e <_printf_i+0x1f6>
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	b004      	add	sp, #16
 80010ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010d2:	6823      	ldr	r3, [r4, #0]
 80010d4:	f043 0320 	orr.w	r3, r3, #32
 80010d8:	6023      	str	r3, [r4, #0]
 80010da:	4833      	ldr	r0, [pc, #204]	; (80011a8 <_printf_i+0x240>)
 80010dc:	2778      	movs	r7, #120	; 0x78
 80010de:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80010e2:	6823      	ldr	r3, [r4, #0]
 80010e4:	6829      	ldr	r1, [r5, #0]
 80010e6:	061f      	lsls	r7, r3, #24
 80010e8:	f851 6b04 	ldr.w	r6, [r1], #4
 80010ec:	d402      	bmi.n	80010f4 <_printf_i+0x18c>
 80010ee:	065f      	lsls	r7, r3, #25
 80010f0:	bf48      	it	mi
 80010f2:	b2b6      	uxthmi	r6, r6
 80010f4:	07df      	lsls	r7, r3, #31
 80010f6:	bf48      	it	mi
 80010f8:	f043 0320 	orrmi.w	r3, r3, #32
 80010fc:	6029      	str	r1, [r5, #0]
 80010fe:	bf48      	it	mi
 8001100:	6023      	strmi	r3, [r4, #0]
 8001102:	b91e      	cbnz	r6, 800110c <_printf_i+0x1a4>
 8001104:	6823      	ldr	r3, [r4, #0]
 8001106:	f023 0320 	bic.w	r3, r3, #32
 800110a:	6023      	str	r3, [r4, #0]
 800110c:	2310      	movs	r3, #16
 800110e:	e7a7      	b.n	8001060 <_printf_i+0xf8>
 8001110:	4824      	ldr	r0, [pc, #144]	; (80011a4 <_printf_i+0x23c>)
 8001112:	e7e4      	b.n	80010de <_printf_i+0x176>
 8001114:	4615      	mov	r5, r2
 8001116:	e7bd      	b.n	8001094 <_printf_i+0x12c>
 8001118:	682b      	ldr	r3, [r5, #0]
 800111a:	6826      	ldr	r6, [r4, #0]
 800111c:	6961      	ldr	r1, [r4, #20]
 800111e:	1d18      	adds	r0, r3, #4
 8001120:	6028      	str	r0, [r5, #0]
 8001122:	0635      	lsls	r5, r6, #24
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	d501      	bpl.n	800112c <_printf_i+0x1c4>
 8001128:	6019      	str	r1, [r3, #0]
 800112a:	e002      	b.n	8001132 <_printf_i+0x1ca>
 800112c:	0670      	lsls	r0, r6, #25
 800112e:	d5fb      	bpl.n	8001128 <_printf_i+0x1c0>
 8001130:	8019      	strh	r1, [r3, #0]
 8001132:	2300      	movs	r3, #0
 8001134:	6123      	str	r3, [r4, #16]
 8001136:	4615      	mov	r5, r2
 8001138:	e7bc      	b.n	80010b4 <_printf_i+0x14c>
 800113a:	682b      	ldr	r3, [r5, #0]
 800113c:	1d1a      	adds	r2, r3, #4
 800113e:	602a      	str	r2, [r5, #0]
 8001140:	681d      	ldr	r5, [r3, #0]
 8001142:	6862      	ldr	r2, [r4, #4]
 8001144:	2100      	movs	r1, #0
 8001146:	4628      	mov	r0, r5
 8001148:	f7ff f83a 	bl	80001c0 <memchr>
 800114c:	b108      	cbz	r0, 8001152 <_printf_i+0x1ea>
 800114e:	1b40      	subs	r0, r0, r5
 8001150:	6060      	str	r0, [r4, #4]
 8001152:	6863      	ldr	r3, [r4, #4]
 8001154:	6123      	str	r3, [r4, #16]
 8001156:	2300      	movs	r3, #0
 8001158:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800115c:	e7aa      	b.n	80010b4 <_printf_i+0x14c>
 800115e:	6923      	ldr	r3, [r4, #16]
 8001160:	462a      	mov	r2, r5
 8001162:	4649      	mov	r1, r9
 8001164:	4640      	mov	r0, r8
 8001166:	47d0      	blx	sl
 8001168:	3001      	adds	r0, #1
 800116a:	d0ad      	beq.n	80010c8 <_printf_i+0x160>
 800116c:	6823      	ldr	r3, [r4, #0]
 800116e:	079b      	lsls	r3, r3, #30
 8001170:	d413      	bmi.n	800119a <_printf_i+0x232>
 8001172:	68e0      	ldr	r0, [r4, #12]
 8001174:	9b03      	ldr	r3, [sp, #12]
 8001176:	4298      	cmp	r0, r3
 8001178:	bfb8      	it	lt
 800117a:	4618      	movlt	r0, r3
 800117c:	e7a6      	b.n	80010cc <_printf_i+0x164>
 800117e:	2301      	movs	r3, #1
 8001180:	4632      	mov	r2, r6
 8001182:	4649      	mov	r1, r9
 8001184:	4640      	mov	r0, r8
 8001186:	47d0      	blx	sl
 8001188:	3001      	adds	r0, #1
 800118a:	d09d      	beq.n	80010c8 <_printf_i+0x160>
 800118c:	3501      	adds	r5, #1
 800118e:	68e3      	ldr	r3, [r4, #12]
 8001190:	9903      	ldr	r1, [sp, #12]
 8001192:	1a5b      	subs	r3, r3, r1
 8001194:	42ab      	cmp	r3, r5
 8001196:	dcf2      	bgt.n	800117e <_printf_i+0x216>
 8001198:	e7eb      	b.n	8001172 <_printf_i+0x20a>
 800119a:	2500      	movs	r5, #0
 800119c:	f104 0619 	add.w	r6, r4, #25
 80011a0:	e7f5      	b.n	800118e <_printf_i+0x226>
 80011a2:	bf00      	nop
 80011a4:	080015c0 	.word	0x080015c0
 80011a8:	080015d1 	.word	0x080015d1

080011ac <__sflush_r>:
 80011ac:	898a      	ldrh	r2, [r1, #12]
 80011ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011b2:	4605      	mov	r5, r0
 80011b4:	0710      	lsls	r0, r2, #28
 80011b6:	460c      	mov	r4, r1
 80011b8:	d458      	bmi.n	800126c <__sflush_r+0xc0>
 80011ba:	684b      	ldr	r3, [r1, #4]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	dc05      	bgt.n	80011cc <__sflush_r+0x20>
 80011c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	dc02      	bgt.n	80011cc <__sflush_r+0x20>
 80011c6:	2000      	movs	r0, #0
 80011c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80011cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011ce:	2e00      	cmp	r6, #0
 80011d0:	d0f9      	beq.n	80011c6 <__sflush_r+0x1a>
 80011d2:	2300      	movs	r3, #0
 80011d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80011d8:	682f      	ldr	r7, [r5, #0]
 80011da:	6a21      	ldr	r1, [r4, #32]
 80011dc:	602b      	str	r3, [r5, #0]
 80011de:	d032      	beq.n	8001246 <__sflush_r+0x9a>
 80011e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80011e2:	89a3      	ldrh	r3, [r4, #12]
 80011e4:	075a      	lsls	r2, r3, #29
 80011e6:	d505      	bpl.n	80011f4 <__sflush_r+0x48>
 80011e8:	6863      	ldr	r3, [r4, #4]
 80011ea:	1ac0      	subs	r0, r0, r3
 80011ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80011ee:	b10b      	cbz	r3, 80011f4 <__sflush_r+0x48>
 80011f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80011f2:	1ac0      	subs	r0, r0, r3
 80011f4:	2300      	movs	r3, #0
 80011f6:	4602      	mov	r2, r0
 80011f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80011fa:	6a21      	ldr	r1, [r4, #32]
 80011fc:	4628      	mov	r0, r5
 80011fe:	47b0      	blx	r6
 8001200:	1c43      	adds	r3, r0, #1
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	d106      	bne.n	8001214 <__sflush_r+0x68>
 8001206:	6829      	ldr	r1, [r5, #0]
 8001208:	291d      	cmp	r1, #29
 800120a:	d82b      	bhi.n	8001264 <__sflush_r+0xb8>
 800120c:	4a29      	ldr	r2, [pc, #164]	; (80012b4 <__sflush_r+0x108>)
 800120e:	410a      	asrs	r2, r1
 8001210:	07d6      	lsls	r6, r2, #31
 8001212:	d427      	bmi.n	8001264 <__sflush_r+0xb8>
 8001214:	2200      	movs	r2, #0
 8001216:	6062      	str	r2, [r4, #4]
 8001218:	04d9      	lsls	r1, r3, #19
 800121a:	6922      	ldr	r2, [r4, #16]
 800121c:	6022      	str	r2, [r4, #0]
 800121e:	d504      	bpl.n	800122a <__sflush_r+0x7e>
 8001220:	1c42      	adds	r2, r0, #1
 8001222:	d101      	bne.n	8001228 <__sflush_r+0x7c>
 8001224:	682b      	ldr	r3, [r5, #0]
 8001226:	b903      	cbnz	r3, 800122a <__sflush_r+0x7e>
 8001228:	6560      	str	r0, [r4, #84]	; 0x54
 800122a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800122c:	602f      	str	r7, [r5, #0]
 800122e:	2900      	cmp	r1, #0
 8001230:	d0c9      	beq.n	80011c6 <__sflush_r+0x1a>
 8001232:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001236:	4299      	cmp	r1, r3
 8001238:	d002      	beq.n	8001240 <__sflush_r+0x94>
 800123a:	4628      	mov	r0, r5
 800123c:	f7ff fbea 	bl	8000a14 <_free_r>
 8001240:	2000      	movs	r0, #0
 8001242:	6360      	str	r0, [r4, #52]	; 0x34
 8001244:	e7c0      	b.n	80011c8 <__sflush_r+0x1c>
 8001246:	2301      	movs	r3, #1
 8001248:	4628      	mov	r0, r5
 800124a:	47b0      	blx	r6
 800124c:	1c41      	adds	r1, r0, #1
 800124e:	d1c8      	bne.n	80011e2 <__sflush_r+0x36>
 8001250:	682b      	ldr	r3, [r5, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d0c5      	beq.n	80011e2 <__sflush_r+0x36>
 8001256:	2b1d      	cmp	r3, #29
 8001258:	d001      	beq.n	800125e <__sflush_r+0xb2>
 800125a:	2b16      	cmp	r3, #22
 800125c:	d101      	bne.n	8001262 <__sflush_r+0xb6>
 800125e:	602f      	str	r7, [r5, #0]
 8001260:	e7b1      	b.n	80011c6 <__sflush_r+0x1a>
 8001262:	89a3      	ldrh	r3, [r4, #12]
 8001264:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001268:	81a3      	strh	r3, [r4, #12]
 800126a:	e7ad      	b.n	80011c8 <__sflush_r+0x1c>
 800126c:	690f      	ldr	r7, [r1, #16]
 800126e:	2f00      	cmp	r7, #0
 8001270:	d0a9      	beq.n	80011c6 <__sflush_r+0x1a>
 8001272:	0793      	lsls	r3, r2, #30
 8001274:	680e      	ldr	r6, [r1, #0]
 8001276:	bf08      	it	eq
 8001278:	694b      	ldreq	r3, [r1, #20]
 800127a:	600f      	str	r7, [r1, #0]
 800127c:	bf18      	it	ne
 800127e:	2300      	movne	r3, #0
 8001280:	eba6 0807 	sub.w	r8, r6, r7
 8001284:	608b      	str	r3, [r1, #8]
 8001286:	f1b8 0f00 	cmp.w	r8, #0
 800128a:	dd9c      	ble.n	80011c6 <__sflush_r+0x1a>
 800128c:	6a21      	ldr	r1, [r4, #32]
 800128e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001290:	4643      	mov	r3, r8
 8001292:	463a      	mov	r2, r7
 8001294:	4628      	mov	r0, r5
 8001296:	47b0      	blx	r6
 8001298:	2800      	cmp	r0, #0
 800129a:	dc06      	bgt.n	80012aa <__sflush_r+0xfe>
 800129c:	89a3      	ldrh	r3, [r4, #12]
 800129e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012a2:	81a3      	strh	r3, [r4, #12]
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	e78e      	b.n	80011c8 <__sflush_r+0x1c>
 80012aa:	4407      	add	r7, r0
 80012ac:	eba8 0800 	sub.w	r8, r8, r0
 80012b0:	e7e9      	b.n	8001286 <__sflush_r+0xda>
 80012b2:	bf00      	nop
 80012b4:	dfbffffe 	.word	0xdfbffffe

080012b8 <_fflush_r>:
 80012b8:	b538      	push	{r3, r4, r5, lr}
 80012ba:	690b      	ldr	r3, [r1, #16]
 80012bc:	4605      	mov	r5, r0
 80012be:	460c      	mov	r4, r1
 80012c0:	b913      	cbnz	r3, 80012c8 <_fflush_r+0x10>
 80012c2:	2500      	movs	r5, #0
 80012c4:	4628      	mov	r0, r5
 80012c6:	bd38      	pop	{r3, r4, r5, pc}
 80012c8:	b118      	cbz	r0, 80012d2 <_fflush_r+0x1a>
 80012ca:	6a03      	ldr	r3, [r0, #32]
 80012cc:	b90b      	cbnz	r3, 80012d2 <_fflush_r+0x1a>
 80012ce:	f7ff fa99 	bl	8000804 <__sinit>
 80012d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d0f3      	beq.n	80012c2 <_fflush_r+0xa>
 80012da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80012dc:	07d0      	lsls	r0, r2, #31
 80012de:	d404      	bmi.n	80012ea <_fflush_r+0x32>
 80012e0:	0599      	lsls	r1, r3, #22
 80012e2:	d402      	bmi.n	80012ea <_fflush_r+0x32>
 80012e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80012e6:	f7ff fb92 	bl	8000a0e <__retarget_lock_acquire_recursive>
 80012ea:	4628      	mov	r0, r5
 80012ec:	4621      	mov	r1, r4
 80012ee:	f7ff ff5d 	bl	80011ac <__sflush_r>
 80012f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80012f4:	07da      	lsls	r2, r3, #31
 80012f6:	4605      	mov	r5, r0
 80012f8:	d4e4      	bmi.n	80012c4 <_fflush_r+0xc>
 80012fa:	89a3      	ldrh	r3, [r4, #12]
 80012fc:	059b      	lsls	r3, r3, #22
 80012fe:	d4e1      	bmi.n	80012c4 <_fflush_r+0xc>
 8001300:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001302:	f7ff fb85 	bl	8000a10 <__retarget_lock_release_recursive>
 8001306:	e7dd      	b.n	80012c4 <_fflush_r+0xc>

08001308 <__swbuf_r>:
 8001308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800130a:	460e      	mov	r6, r1
 800130c:	4614      	mov	r4, r2
 800130e:	4605      	mov	r5, r0
 8001310:	b118      	cbz	r0, 800131a <__swbuf_r+0x12>
 8001312:	6a03      	ldr	r3, [r0, #32]
 8001314:	b90b      	cbnz	r3, 800131a <__swbuf_r+0x12>
 8001316:	f7ff fa75 	bl	8000804 <__sinit>
 800131a:	69a3      	ldr	r3, [r4, #24]
 800131c:	60a3      	str	r3, [r4, #8]
 800131e:	89a3      	ldrh	r3, [r4, #12]
 8001320:	071a      	lsls	r2, r3, #28
 8001322:	d525      	bpl.n	8001370 <__swbuf_r+0x68>
 8001324:	6923      	ldr	r3, [r4, #16]
 8001326:	b31b      	cbz	r3, 8001370 <__swbuf_r+0x68>
 8001328:	6823      	ldr	r3, [r4, #0]
 800132a:	6922      	ldr	r2, [r4, #16]
 800132c:	1a98      	subs	r0, r3, r2
 800132e:	6963      	ldr	r3, [r4, #20]
 8001330:	b2f6      	uxtb	r6, r6
 8001332:	4283      	cmp	r3, r0
 8001334:	4637      	mov	r7, r6
 8001336:	dc04      	bgt.n	8001342 <__swbuf_r+0x3a>
 8001338:	4621      	mov	r1, r4
 800133a:	4628      	mov	r0, r5
 800133c:	f7ff ffbc 	bl	80012b8 <_fflush_r>
 8001340:	b9e0      	cbnz	r0, 800137c <__swbuf_r+0x74>
 8001342:	68a3      	ldr	r3, [r4, #8]
 8001344:	3b01      	subs	r3, #1
 8001346:	60a3      	str	r3, [r4, #8]
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	1c5a      	adds	r2, r3, #1
 800134c:	6022      	str	r2, [r4, #0]
 800134e:	701e      	strb	r6, [r3, #0]
 8001350:	6962      	ldr	r2, [r4, #20]
 8001352:	1c43      	adds	r3, r0, #1
 8001354:	429a      	cmp	r2, r3
 8001356:	d004      	beq.n	8001362 <__swbuf_r+0x5a>
 8001358:	89a3      	ldrh	r3, [r4, #12]
 800135a:	07db      	lsls	r3, r3, #31
 800135c:	d506      	bpl.n	800136c <__swbuf_r+0x64>
 800135e:	2e0a      	cmp	r6, #10
 8001360:	d104      	bne.n	800136c <__swbuf_r+0x64>
 8001362:	4621      	mov	r1, r4
 8001364:	4628      	mov	r0, r5
 8001366:	f7ff ffa7 	bl	80012b8 <_fflush_r>
 800136a:	b938      	cbnz	r0, 800137c <__swbuf_r+0x74>
 800136c:	4638      	mov	r0, r7
 800136e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001370:	4621      	mov	r1, r4
 8001372:	4628      	mov	r0, r5
 8001374:	f000 f806 	bl	8001384 <__swsetup_r>
 8001378:	2800      	cmp	r0, #0
 800137a:	d0d5      	beq.n	8001328 <__swbuf_r+0x20>
 800137c:	f04f 37ff 	mov.w	r7, #4294967295
 8001380:	e7f4      	b.n	800136c <__swbuf_r+0x64>
	...

08001384 <__swsetup_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <__swsetup_r+0xac>)
 8001388:	4605      	mov	r5, r0
 800138a:	6818      	ldr	r0, [r3, #0]
 800138c:	460c      	mov	r4, r1
 800138e:	b118      	cbz	r0, 8001398 <__swsetup_r+0x14>
 8001390:	6a03      	ldr	r3, [r0, #32]
 8001392:	b90b      	cbnz	r3, 8001398 <__swsetup_r+0x14>
 8001394:	f7ff fa36 	bl	8000804 <__sinit>
 8001398:	89a3      	ldrh	r3, [r4, #12]
 800139a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800139e:	0718      	lsls	r0, r3, #28
 80013a0:	d422      	bmi.n	80013e8 <__swsetup_r+0x64>
 80013a2:	06d9      	lsls	r1, r3, #27
 80013a4:	d407      	bmi.n	80013b6 <__swsetup_r+0x32>
 80013a6:	2309      	movs	r3, #9
 80013a8:	602b      	str	r3, [r5, #0]
 80013aa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80013ae:	81a3      	strh	r3, [r4, #12]
 80013b0:	f04f 30ff 	mov.w	r0, #4294967295
 80013b4:	e034      	b.n	8001420 <__swsetup_r+0x9c>
 80013b6:	0758      	lsls	r0, r3, #29
 80013b8:	d512      	bpl.n	80013e0 <__swsetup_r+0x5c>
 80013ba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013bc:	b141      	cbz	r1, 80013d0 <__swsetup_r+0x4c>
 80013be:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013c2:	4299      	cmp	r1, r3
 80013c4:	d002      	beq.n	80013cc <__swsetup_r+0x48>
 80013c6:	4628      	mov	r0, r5
 80013c8:	f7ff fb24 	bl	8000a14 <_free_r>
 80013cc:	2300      	movs	r3, #0
 80013ce:	6363      	str	r3, [r4, #52]	; 0x34
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80013d6:	81a3      	strh	r3, [r4, #12]
 80013d8:	2300      	movs	r3, #0
 80013da:	6063      	str	r3, [r4, #4]
 80013dc:	6923      	ldr	r3, [r4, #16]
 80013de:	6023      	str	r3, [r4, #0]
 80013e0:	89a3      	ldrh	r3, [r4, #12]
 80013e2:	f043 0308 	orr.w	r3, r3, #8
 80013e6:	81a3      	strh	r3, [r4, #12]
 80013e8:	6923      	ldr	r3, [r4, #16]
 80013ea:	b94b      	cbnz	r3, 8001400 <__swsetup_r+0x7c>
 80013ec:	89a3      	ldrh	r3, [r4, #12]
 80013ee:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80013f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80013f6:	d003      	beq.n	8001400 <__swsetup_r+0x7c>
 80013f8:	4621      	mov	r1, r4
 80013fa:	4628      	mov	r0, r5
 80013fc:	f000 f850 	bl	80014a0 <__smakebuf_r>
 8001400:	89a0      	ldrh	r0, [r4, #12]
 8001402:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001406:	f010 0301 	ands.w	r3, r0, #1
 800140a:	d00a      	beq.n	8001422 <__swsetup_r+0x9e>
 800140c:	2300      	movs	r3, #0
 800140e:	60a3      	str	r3, [r4, #8]
 8001410:	6963      	ldr	r3, [r4, #20]
 8001412:	425b      	negs	r3, r3
 8001414:	61a3      	str	r3, [r4, #24]
 8001416:	6923      	ldr	r3, [r4, #16]
 8001418:	b943      	cbnz	r3, 800142c <__swsetup_r+0xa8>
 800141a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800141e:	d1c4      	bne.n	80013aa <__swsetup_r+0x26>
 8001420:	bd38      	pop	{r3, r4, r5, pc}
 8001422:	0781      	lsls	r1, r0, #30
 8001424:	bf58      	it	pl
 8001426:	6963      	ldrpl	r3, [r4, #20]
 8001428:	60a3      	str	r3, [r4, #8]
 800142a:	e7f4      	b.n	8001416 <__swsetup_r+0x92>
 800142c:	2000      	movs	r0, #0
 800142e:	e7f7      	b.n	8001420 <__swsetup_r+0x9c>
 8001430:	2000007c 	.word	0x2000007c

08001434 <_sbrk_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d06      	ldr	r5, [pc, #24]	; (8001450 <_sbrk_r+0x1c>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	602b      	str	r3, [r5, #0]
 8001440:	f7ff f8f4 	bl	800062c <_sbrk>
 8001444:	1c43      	adds	r3, r0, #1
 8001446:	d102      	bne.n	800144e <_sbrk_r+0x1a>
 8001448:	682b      	ldr	r3, [r5, #0]
 800144a:	b103      	cbz	r3, 800144e <_sbrk_r+0x1a>
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	bd38      	pop	{r3, r4, r5, pc}
 8001450:	200001dc 	.word	0x200001dc

08001454 <__swhatbuf_r>:
 8001454:	b570      	push	{r4, r5, r6, lr}
 8001456:	460c      	mov	r4, r1
 8001458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800145c:	2900      	cmp	r1, #0
 800145e:	b096      	sub	sp, #88	; 0x58
 8001460:	4615      	mov	r5, r2
 8001462:	461e      	mov	r6, r3
 8001464:	da0d      	bge.n	8001482 <__swhatbuf_r+0x2e>
 8001466:	89a3      	ldrh	r3, [r4, #12]
 8001468:	f013 0f80 	tst.w	r3, #128	; 0x80
 800146c:	f04f 0100 	mov.w	r1, #0
 8001470:	bf0c      	ite	eq
 8001472:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001476:	2340      	movne	r3, #64	; 0x40
 8001478:	2000      	movs	r0, #0
 800147a:	6031      	str	r1, [r6, #0]
 800147c:	602b      	str	r3, [r5, #0]
 800147e:	b016      	add	sp, #88	; 0x58
 8001480:	bd70      	pop	{r4, r5, r6, pc}
 8001482:	466a      	mov	r2, sp
 8001484:	f000 f848 	bl	8001518 <_fstat_r>
 8001488:	2800      	cmp	r0, #0
 800148a:	dbec      	blt.n	8001466 <__swhatbuf_r+0x12>
 800148c:	9901      	ldr	r1, [sp, #4]
 800148e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001492:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001496:	4259      	negs	r1, r3
 8001498:	4159      	adcs	r1, r3
 800149a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800149e:	e7eb      	b.n	8001478 <__swhatbuf_r+0x24>

080014a0 <__smakebuf_r>:
 80014a0:	898b      	ldrh	r3, [r1, #12]
 80014a2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80014a4:	079d      	lsls	r5, r3, #30
 80014a6:	4606      	mov	r6, r0
 80014a8:	460c      	mov	r4, r1
 80014aa:	d507      	bpl.n	80014bc <__smakebuf_r+0x1c>
 80014ac:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80014b0:	6023      	str	r3, [r4, #0]
 80014b2:	6123      	str	r3, [r4, #16]
 80014b4:	2301      	movs	r3, #1
 80014b6:	6163      	str	r3, [r4, #20]
 80014b8:	b002      	add	sp, #8
 80014ba:	bd70      	pop	{r4, r5, r6, pc}
 80014bc:	ab01      	add	r3, sp, #4
 80014be:	466a      	mov	r2, sp
 80014c0:	f7ff ffc8 	bl	8001454 <__swhatbuf_r>
 80014c4:	9900      	ldr	r1, [sp, #0]
 80014c6:	4605      	mov	r5, r0
 80014c8:	4630      	mov	r0, r6
 80014ca:	f7ff fb0f 	bl	8000aec <_malloc_r>
 80014ce:	b948      	cbnz	r0, 80014e4 <__smakebuf_r+0x44>
 80014d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014d4:	059a      	lsls	r2, r3, #22
 80014d6:	d4ef      	bmi.n	80014b8 <__smakebuf_r+0x18>
 80014d8:	f023 0303 	bic.w	r3, r3, #3
 80014dc:	f043 0302 	orr.w	r3, r3, #2
 80014e0:	81a3      	strh	r3, [r4, #12]
 80014e2:	e7e3      	b.n	80014ac <__smakebuf_r+0xc>
 80014e4:	89a3      	ldrh	r3, [r4, #12]
 80014e6:	6020      	str	r0, [r4, #0]
 80014e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014ec:	81a3      	strh	r3, [r4, #12]
 80014ee:	9b00      	ldr	r3, [sp, #0]
 80014f0:	6163      	str	r3, [r4, #20]
 80014f2:	9b01      	ldr	r3, [sp, #4]
 80014f4:	6120      	str	r0, [r4, #16]
 80014f6:	b15b      	cbz	r3, 8001510 <__smakebuf_r+0x70>
 80014f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014fc:	4630      	mov	r0, r6
 80014fe:	f000 f81d 	bl	800153c <_isatty_r>
 8001502:	b128      	cbz	r0, 8001510 <__smakebuf_r+0x70>
 8001504:	89a3      	ldrh	r3, [r4, #12]
 8001506:	f023 0303 	bic.w	r3, r3, #3
 800150a:	f043 0301 	orr.w	r3, r3, #1
 800150e:	81a3      	strh	r3, [r4, #12]
 8001510:	89a3      	ldrh	r3, [r4, #12]
 8001512:	431d      	orrs	r5, r3
 8001514:	81a5      	strh	r5, [r4, #12]
 8001516:	e7cf      	b.n	80014b8 <__smakebuf_r+0x18>

08001518 <_fstat_r>:
 8001518:	b538      	push	{r3, r4, r5, lr}
 800151a:	4d07      	ldr	r5, [pc, #28]	; (8001538 <_fstat_r+0x20>)
 800151c:	2300      	movs	r3, #0
 800151e:	4604      	mov	r4, r0
 8001520:	4608      	mov	r0, r1
 8001522:	4611      	mov	r1, r2
 8001524:	602b      	str	r3, [r5, #0]
 8001526:	f7ff f858 	bl	80005da <_fstat>
 800152a:	1c43      	adds	r3, r0, #1
 800152c:	d102      	bne.n	8001534 <_fstat_r+0x1c>
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	b103      	cbz	r3, 8001534 <_fstat_r+0x1c>
 8001532:	6023      	str	r3, [r4, #0]
 8001534:	bd38      	pop	{r3, r4, r5, pc}
 8001536:	bf00      	nop
 8001538:	200001dc 	.word	0x200001dc

0800153c <_isatty_r>:
 800153c:	b538      	push	{r3, r4, r5, lr}
 800153e:	4d06      	ldr	r5, [pc, #24]	; (8001558 <_isatty_r+0x1c>)
 8001540:	2300      	movs	r3, #0
 8001542:	4604      	mov	r4, r0
 8001544:	4608      	mov	r0, r1
 8001546:	602b      	str	r3, [r5, #0]
 8001548:	f7ff f857 	bl	80005fa <_isatty>
 800154c:	1c43      	adds	r3, r0, #1
 800154e:	d102      	bne.n	8001556 <_isatty_r+0x1a>
 8001550:	682b      	ldr	r3, [r5, #0]
 8001552:	b103      	cbz	r3, 8001556 <_isatty_r+0x1a>
 8001554:	6023      	str	r3, [r4, #0]
 8001556:	bd38      	pop	{r3, r4, r5, pc}
 8001558:	200001dc 	.word	0x200001dc

0800155c <_init>:
 800155c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800155e:	bf00      	nop
 8001560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001562:	bc08      	pop	{r3}
 8001564:	469e      	mov	lr, r3
 8001566:	4770      	bx	lr

08001568 <_fini>:
 8001568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800156a:	bf00      	nop
 800156c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800156e:	bc08      	pop	{r3}
 8001570:	469e      	mov	lr, r3
 8001572:	4770      	bx	lr
