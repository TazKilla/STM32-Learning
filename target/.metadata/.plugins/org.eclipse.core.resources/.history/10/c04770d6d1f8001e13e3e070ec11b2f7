/**
 ******************************************************************************
 * @file           : main.c
 * @author         : Auto-generated by STM32CubeIDE
 * @brief          : Main program body
 ******************************************************************************
 * @attention
 *
 * Copyright (c) 2024 STMicroelectronics.
 * All rights reserved.
 *
 * This software is licensed under terms that can be found in the LICENSE file
 * in the root directory of this software component.
 * If no LICENSE file comes with this software, it is provided AS-IS.
 *
 ******************************************************************************
 */

#include <stdint.h>
#include <stdio.h>

#include "gpio_ports.h"

extern void initialise_monitor_handles();

int main(void)
{
	initialise_monitor_handles();

	uint64_t tics_cntr = 0;
	uint64_t toggle_cntr = 0;
	int led_state = 0;
	int delay_in_tics = 5000;
	int delay_evolution = 1;
	const int LEDPIN = 13;

	printf("Initializing GPIO port...\n");
	activatePort(&GPIOPortB);
	selectPinFunction(&GPIOPortB, LEDPIN, 1);
	setPin(&GPIOPortB, LEDPIN);
	led_state = 1;
	printf("GPIO port initialized.\n");

    /* Loop forever */
	for(;;)
	{
		if(tics_cntr - toggle_cntr >= delay_in_tics)
		{
			if(led_state == 1)
			{
				//*GPIOPortB.pPortOutDataReg &= ~(1 << 13);
				clearPin(&GPIOPortB, LEDPIN);
				led_state = 0;
			} else {
				//*GPIOPortB.pPortOutDataReg |= 1 << 13;
				setPin(&GPIOPortB, LEDPIN);
				led_state = 1;
			}
			toggle_cntr = tics_cntr;

			if(delay_in_tics >= 50000)
			{
				delay_evolution = 1;
				printf("Max delay reached, decreasing...\n");
			} else if(delay_in_tics <= 1000)
			{
				delay_evolution = 0;
				printf("Min delay reached, increasing...\n");
			}
			if(delay_evolution)
				delay_in_tics -= 10;
			else
				delay_in_tics += 10;
		}

		tics_cntr++;
	}
}
